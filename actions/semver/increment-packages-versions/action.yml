name: SEMVER increment packages versions
description: >
  From a JSON string containing a dictionary mapping packages to their current version,
  and another JSON string containing a dictionary mapping packages to their available
  versions,
  compute the next increment/latest version and
  return a JSON string of a dictionary mapping each package to its updated version.

inputs:
  packages:
    description: >
      Stringified JSON dictionary mapping packages to their current version.
      e.g.
      ```{"foobar": "1.2.3"}```
    required: true
  versions:
    description: >
      Stringified JSON dictionary mapping packages to a list of their available versions.
      e.g.
      ```{"foobar": ["0.0.1", "0.1.0", "1.0.0", "1.1.0", "1.2.0", "1.2.1", "1.2.2",
      "1.2.3", "1.3.0", "1.3.1"]}```
    required: true
  method:
    description: >
      Increment method: `increment` to go to the next higher version or `latest`.
    type: choice
    options:
    - increment
    - latest
    required: true

outputs:
  packages:
    description: >
      Stringified JSON dictionary mapping the retrieved packages to their respective
      incremented versions.
      e.g. following the examples from above:
      ```{"foobar": "1.3.0"}``` for 'increment'
      ```{"foobar": "1.4.0"}``` for 'latest'
    value: ${{ steps.increment-package-versions.outputs.packages }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        semver

  - id: increment-package-versions
    name: Increment package versions
    shell: python
    env:
      inputs_packages: ${{ inputs.packages }}
      inputs_versions: ${{ inputs.versions }}
      inputs_method: ${{ inputs.method }}
    run: |
      import os, sys, re, json, semver, pprint
      from functools import cmp_to_key

      packages = json.loads(json.loads(str(os.getenv("inputs_packages"))))
      assert packages

      versions = json.loads(json.loads(str(os.getenv("inputs_versions"))))
      assert versions

      method = str(os.getenv("inputs_method"))
      assert method

      outpackages = dict()
      for package in packages.keys():
          print(package)
          if package in versions.keys():
              reference = semver.Version.parse(packages[package])
              semantics = sorted(
                  [
                      semver.Version.parse(v)
                      for v in versions[package]
                      if semver.Version.is_valid(v)
                  ]
              )
              pprint.pp(semantics)
              print("min:", min(semantics))
              print("max:", max(semantics))
              semantics = [v for v in semantics if reference <= v]
              print("reference:", reference)
              print("current", semantics[0])
              print("next:", semantics[1])
              print("latest:", semantics[-1])
              if method == "increment":
                  outpackages[package] = str(semantics[1])
              elif method == "latest":
                  outpackages[package] = str(semantics[-1])
          else:
              outpackages[package] = packages[package]

      pprint.pp(outpackages)
      packages_json_escaped = json.dumps(json.dumps(outpackages, sort_keys=True))
      print(packages_json_escaped)
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"indices={packages_json_escaped}")
          print(f"indices={packages_json_escaped}", file=fh)
