name: NuGet Push
description: >
  Performs nuget push for a given nuget package (.nupkg) file.


inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  package:
    description: package to push (relative path)
    required: true

  source:
    description: Package source (URL, UNC/folder path or package source name) to push to. Defaults to DefaultPushSource if specified in NuGet.Config.
    required: false
    default: ''
  api-key:
    description: The API key for the server.
    required: true
  symbol-source:
    description: Symbol server URL to push to.
    required: false
    default: ''
  symbol-api-key:
    description: The API key for the symbol server.
    required: false
    default: ''
  timeout:
    description: Timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).
    required: false
    default: 300
  disable-buffering:
    description: Disable buffering when pushing to an HTTP(S) server to decrease memory usage. Note that when this option is enabled, integrated windows authentication might not work.
    required: false
    default: false
  no-symbols:
    description: If a symbols package exists, it will not be pushed to a symbol server.
    required: false
    default: false
  no-service-endpoint:
    description: Does not append "api/v2/packages" to the source URL.
    required: false
    default: false
  skip-duplicate:
    description: If a package and version already exists, skip it and continue with the next package in the push, if any.
    required: false
    default: false
  verbosity:
    description: 'Display this amount of details in the output: normal, quiet, detailed.'
    required: false
    default: normal
  non-interactive:
    description: Do not prompt for user input or confirmations.
    required: false
    default: false
  config-file:
    description: The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. To learn more about NuGet configuration go to https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior.
    required: false
    default: ''
  force-english-output:
    description: Forces the application to run using an invariant, English-based culture.
    required: false
    default: false


runs:
  using: composite
  steps:
  - id: nuget-help
    name: NuGet help
    shell: python
    run: |
      ## actions/nuget/push/action.yml#nuget-help
      import os

      err = os.waitstatus_to_exitcode(os.system("mono nuget help"))
      exit(err)
  - id: nuget-help-push
    name: NuGet help push
    shell: python
    run: |
      ## actions/nuget/push/action.yml#nuget-help-push
      import os

      err = os.waitstatus_to_exitcode(os.system("mono nuget help push"))
      exit(err)

  - id: nuget-push
    name: NuGet push
    shell: python
    env:
      inputs_path: ${{ inputs.path }}
      inputs_package: ${{ inputs.package }}
      inputs_source: ${{ inputs.source }}
      inputs_api_key: ${{ inputs.api-key }}
      inputs_symbol_source: ${{ inputs.symbol-source }}
      inputs_symbol_api_key: ${{ inputs.symbol-api-key }}
      inputs_timeout: ${{ inputs.timeout }}
      inputs_disable_buffering: ${{ inputs.disable-buffering }}
      inputs_no_symbols: ${{ inputs.no-symbols }}
      inputs_no_service_endpoint: ${{ inputs.no-service-endpoint }}
      inputs_skip_duplicate: ${{ inputs.skip-duplicate }}
      inputs_verbosity: ${{ inputs.verbosity }}
      inputs_non_interactive: ${{ inputs.non-interactive }}
      inputs_config_file: ${{ inputs.config-file }}
      inputs_force_english_output: ${{ inputs.force-english-output }}
    run: |
      ## actions/nuget/push/action.yml#nuget-push
      import os
      from pathlib import Path
      from contextlib import chdir
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WORKSPACE", "."))

      inputs_path = os.getenv("inputs_path")
      assert inputs_path
      path = Path(inputs_path)

      with chdir(path):
          inputs_package = os.getenv("inputs_package")
          assert inputs_package is not None
          package = Path(inputs_package)

          inputs_source = os.getenv("inputs_source")
          assert inputs_source is not None
          source = str(inputs_source)

          inputs_api_key = os.getenv("inputs_api_key")
          assert inputs_api_key is not None
          api_key = str(inputs_api_key)

          inputs_symbol_source = os.getenv("inputs_symbol_source")
          assert inputs_symbol_source is not None
          symbol_source = str(inputs_symbol_source)

          inputs_symbol_api_key = os.getenv("inputs_symbol_api_key")
          assert inputs_symbol_api_key is not None
          symbol_api_key = str(inputs_symbol_api_key)

          inputs_timeout = os.getenv("inputs_timeout", "300")
          assert inputs_timeout is not None
          timeout = int(inputs_timeout)

          inputs_disable_buffering = os.getenv("inputs_disable_buffering")
          assert inputs_disable_buffering is not None
          disable_buffering = str(inputs_disable_buffering) == "true"

          inputs_no_symbols = os.getenv("inputs_no_symbols")
          assert inputs_no_symbols is not None
          no_symbols = str(inputs_no_symbols) == "true"

          inputs_no_service_endpoint = os.getenv("inputs_no_service_endpoint")
          assert inputs_no_service_endpoint is not None
          no_service_endpoint = str(inputs_no_service_endpoint) == "true"

          inputs_skip_duplicate = os.getenv("inputs_skip_duplicate")
          assert inputs_skip_duplicate is not None
          skip_duplicate = str(inputs_skip_duplicate) == "true"

          inputs_verbosity = os.getenv("inputs_verbosity")
          assert inputs_verbosity is not None
          verbosity = str(inputs_verbosity)

          inputs_non_interactive = os.getenv("inputs_non_interactive")
          assert inputs_non_interactive is not None
          non_interactive = str(inputs_non_interactive) == "true"

          inputs_config_file = os.getenv("inputs_config_file")
          assert inputs_config_file is not None
          config_file = Path(inputs_config_file)

          inputs_force_english_output = os.getenv("inputs_force_english_output")
          assert inputs_force_english_output is not None
          force_english_output = str(inputs_force_english_output) == "true"

          command = ["nuget", "push"]

          if source:
              command += ["-Source", source]

          if api_key:
              command += ["-ApiKey", api_key]

          if symbol_source:
              command += ["-SymbolSource", symbol_source]

          if symbol_api_key:
              command += ["-SymbolApiKey", symbol_api_key]

          if timeout != 300:
              command += ["-Timeout", str(timeout)]

          if config_file:
              command += ["-ConfigFile", str(config_file)]

          if disable_buffering:
              command += ["-DisableBuffering"]

          if no_symbols:
              command += ["-NoSymbols"]

          if no_service_endpoint:
              command += ["-NoServiceEndpoint"]

          if skip_duplicate:
              command += ["-SkipDuplicate"]

          if non_interactive:
              command += ["-NonInteractive"]

          if force_english_output:
              command += ["-ForceEnglishOutput"]

          # comes last
          command += [str(package)]

          cmd = " ".join(command)
          print(cmd, flush=True)
          err = os.waitstatus_to_exitcode(os.system(cmd))
          exit(err)

  - id: help
    shell: cat {0}
    run: |
      ## actions/nuget/push/action.yml#help
      NuGet Version: 6.3.1.1
      usage: NuGet push <package path> [API key] [options]

      Pushes a package to the server and publishes it.
      NuGet's default configuration is obtained by loading %AppData%\NuGet\NuGet.config, then loading any nuget.config or .nuget\nuget.config starting from root of drive and ending in current directory.

          Specify the path to the package and your API key to push the package to the server.

      options:

      -Source                  (src)                                  Package source (URL, UNC/folder path or package source name) to push to. Defaults to DefaultPushSource if specified in NuGet.Config.
      -ApiKey                                                         The API key for the server.
      -SymbolSource                                                   Symbol server URL to push to.
      -SymbolApiKey                                                   The API key for the symbol server.
      -Timeout                                                        Timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).
      -DisableBuffering                                               Disable buffering when pushing to an HTTP(S) server to decrease memory usage. Note that when this option is enabled, integrated windows authentication might not work.
      -NoSymbols                                                      If a symbols package exists, it will not be pushed to a symbol server.
      -NoServiceEndpoint                                              Does not append "api/v2/packages" to the source URL.
      -SkipDuplicate                                                  If a package and version already exists, skip it and continue with the next package in the push, if any.
      -Help                    (?)                                    help
      -Verbosity                                                      Display this amount of details in the output: normal, quiet, detailed.
      -NonInteractive                                                 Do not prompt for user input or confirmations.
      -ConfigFile                                                     The NuGet configuration file. If specified, only the settings from this file will be used. If not specified, the hierarchy of configuration files from the current directory will be used. To learn more about NuGet configuration go to https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior.
      -ForceEnglishOutput                                             Forces the application to run using an invariant, English-based culture.

      examples:

      nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a

      nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -src http://customsource/

      nuget push foo.nupkg

      nuget push foo.nupkg.symbols

      nuget push foo.nupkg -Timeout 360

      For more information, visit https://docs.nuget.org/docs/reference/command-line-reference

