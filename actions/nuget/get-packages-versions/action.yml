name: NUGET get packages versions
description: >
  Retrieves a list of available versions for several NUGET packages.

  The returned structure maps the package name to its versions.

  NOTE: All packages must be available on the same registry.

inputs:
  token:
    description: >
      GitHub (Enterprise): token with "packages:read" permissions for the given repository.
      Defaults to empty string for nuget.org.
    required: false
    default: ''
  registry:
    description: >
      Registry URL from where to fetch the package, with the terminal path `index.json`, i.e. same format as NuGet.config
      Defaults to official NuGet registry.
    required: false
    default: https://api.nuget.org/v3/index.json
  packages:
    description: >
      Package names.
      Space-separated list.
    required: true

outputs:
  packages:
    description: >-
      JSON string of the packages along with their versions (dict).

      GitHub Actions cannot return objects, hence only the JSON string is possible.
      To retrieve the object, use $ {{ fromJSON(steps.this-step.outputs.index) }}.
      fromJSON(fromJSON()) is the correct way to retrieve the object

      The `fromJSON` below transforms the escaped string into an unescaped one.
    value: ${{ fromJSON(steps.get-packages-versions.outputs.packages) }}
  base-url:
    description: first encountered value for "PackageBaseAddress"
    value: ${{ steps.get-packages-versions.outputs.base_url }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: get-packages-versions
    name: Get packages versions
    shell: python
    env:
      inputs_registry: ${{inputs.registry}}
      inputs_token: ${{inputs.token}}
      inputs_packages: ${{inputs.packages}}
    run: |
      import os, sys, json, pprint, requests
      from urllib.parse import urlparse, urljoin

      session = requests.Session()

      registry_url = str(os.getenv("inputs_registry"))
      assert registry_url is not None
      assert registry_url.endswith("index.json")
      assert urlparse(registry_url) is not None

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))
      print(f"token: {token}")
      if token and len(token) > 0:
          session.headers["Authorization"] = f"Bearer {token}"
          session.headers["X-NuGet-ApiKey"] = token
      session.headers["X-NuGet-Protocol-Version"] = "4.1.0"
      pprint.pp(session.headers)

      registry_index_response = session.get(registry_url)
      assert registry_index_response is not None
      print(registry_index_response.status_code, registry_index_response.reason)
      assert registry_index_response.ok

      registry_index_data = registry_index_response.json()
      assert registry_index_data is not None
      pprint.pp(registry_index_data)
      print(json.dumps(registry_index_data, indent=2))

      ## retrieve 'PackageBaseAddress' from resources
      resources = registry_index_data["resources"]
      assert resources is not None
      pprint.pp(resources)

      base_url = list(
          filter(
              lambda item: item["@type"].startswith("PackageBaseAddress"),
              resources,
          )
      )[0]["@id"]
      assert urlparse(base_url) is not None
      print(f"base_url: {base_url}")
      if not base_url.endswith("/"):
          base_url = f"{base_url}/"
      assert urlparse(base_url) is not None

      packages = str(os.getenv("inputs_packages")).split()
      packages_data = dict()
      for package_name in packages:
          print(f"package_name: {package_name}")
          assert package_name is not None
          assert len(package_name)

          package_url = urljoin(base_url, f"{package_name.lower()}/index.json")
          assert urlparse(package_url) is not None
          print(f"fetching {package_url}")

          package_response = session.get(package_url)
          assert package_response is not None
          print(package_response.status_code, package_response.reason)
          assert package_response.ok

          package_data = package_response.json()
          assert package_data is not None
          pprint.pp(package_data)
          packages_data[package_name] = package_data["versions"]

      packages_json_escaped = json.dumps(json.dumps(packages_data, sort_keys=True))
      print(packages_json_escaped)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"packages={packages_json_escaped}")
          print(f"packages={packages_json_escaped}", file=fh)
          print(f"base_url={base_url}")
          print(f"base_url={base_url}", file=fh)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      steps.get-packages-versions.outputs.packages
      raw: ${{steps.get-packages-versions.outputs.packages}}
      string: fromJSON ${{fromJSON(steps.get-packages-versions.outputs.packages)}}
      object: fromJSON(fromJson) ${{fromJson(fromJSON(steps.get-packages-versions.outputs.packages))}}

      ===========================================

      steps.get-packages-versions.outputs.base_url
      ${{steps.get-packages-versions.outputs.base_url}}
