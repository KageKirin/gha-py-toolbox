name: NUGET get index
description: >
  Retrieves the NUGET registry index.
  The returned structure indicates the different API endpoints.

inputs:
  token:
    description: >
      GitHub (Enterprise): token with "packages:read" permissions for the given repository.
      Defaults to empty string for nuget.org.
    required: false
    default: ''
  registry:
    description: >
      Registry URL from where to fetch the package, with the terminal path `index.json`, i.e. same format as NuGet.config
      Defaults to official NuGet registry.
    required: false
    default: https://api.nuget.org/v3/index.json

outputs:
  index:
    description: >
      JSON string of the index structure.
      GitHub Actions cannot return objects, hence only the JSON string is possible.
      To retrieve the object, use $ {{ fromJSON(steps.this-step.outputs.index) }}.
      fromJSON(fromJSON()) is the correct way to retrieve the object

      The `fromJSON` below transforms the escaped string into an unescaped one.
    value: ${{fromJSON(steps.get-index.outputs.index)}}
  base-url:
    description: first encountered value for "RegistrationsBaseUrl"
    value: ${{steps.get-index.outputs.base_url}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: get-index
    name: Get index
    shell: python
    env:
      inputs_registry: ${{inputs.registry}}
      inputs_token: ${{inputs.token}}
    run: |
      import os, sys, json, pprint, requests
      from urllib.parse import urlparse, urljoin

      session = requests.Session()

      registry_url = str(os.getenv("inputs_registry"))
      assert urlparse(registry_url) is not None
      if not registry_url.endswith("/"):
          registry_url = registry_url + "/"
      print(f"registry_url: {registry_url}")
      assert urlparse(registry_url) is not None

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))
      print(f"token: {token}")
      if token and token != "":
          session.headers["Authorization"] = f"Bearer {token}"


      index_url = urljoin(registry_url, "index.json")
      assert urlparse(index_url) is not None
      print(f"fetching {index_url}")

      index_response = session.get(index_url)
      assert index_response is not None
      print(index_response.status_code, index_response.reason)
      assert index_response.ok

      index_data = index_response.json()
      assert index_data is not None
      pprint.pp(index_data)

      ## retrieve 'RegistrationsBaseUrl' from resources
      resources = index_data["resources"]
      assert resources is not None
      pprint.pp(resources)

      base_url = list(
          filter(
              lambda item: item["@type"].startswith("RegistrationsBaseUrl"),
              resources,
          )
      )[0]["@id"]
      assert urlparse(base_url) is not None
      print(f"base_url: {base_url}")
      if not base_url.endswith("/"):
          base_url = f"{base_url}/"
      assert urlparse(base_url) is not None

      """
        encode: `json.dumps(json.dumps())` for escaped JSON string
          double JSON encoding transforms the raw JSON string
          into an escaped JSON string,
          which can be easily written to GITHUB_OUTPUT.

        decode: `json.loads(json.loads())` for object from escaped JSON string
        - to retrieve the unescaped string, we use can `json.loads()`
          or rather the GitHub Actions expression `fromJSON()`
        - to retrieve the actual object, we can use `json.loads()` twice, i.e. `json.loads(json.loads())`
          or rather the GitHub Actions expression `fromJSON()` twice, i.e. `fromJSON(fromJSON())`
      """

      index_json_escaped = json.dumps(json.dumps(index_data, sort_keys=True))

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"index={index_json_escaped}")
          print(f"index={index_json_escaped}", file=fh)
          print(f"base_url={base_url}")
          print(f"base_url={base_url}", file=fh)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      steps.get-index.outputs.index
      ${{steps.get-index.outputs.index}}
      fromJSON ${{fromJSON(steps.get-index.outputs.index)}}
      fromJSON(fromJSON) ${{fromJSON(fromJSON(steps.get-index.outputs.index))}}

      ===========================================

      steps.get-index.outputs.base_url
      ${{steps.get-index.outputs.base_url}}
