name: .NET Restore Tools (via tool manifest)
description: >
  Restore (i.e. load) the tool dependencies as required by the tool manifest
  Note: ought to run _before_ everything else.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  nuget-config:
    description: >
      NuGet.config file to use
      empty string (default) refers `NuGet.config`
    required: false
    default: ''
  tool-manifest:
    description: >
      dotnet-tools.json file to use
      empty string (default) refers `.config/dotnet-tools.json`
    required: false
    default: ''
  options:
    description: >
      supplementary command line options forwarded to `dotnet tool restore`
      newline separated list.
    required: false
    default: ''


runs:
  using: composite
  steps:
  - id: restore-tools
    name: Restore Tools
    shell: python
    env:
      build_path: ${{inputs.path}}
      nuget-config: ${{inputs.nuget-config}}
      tool-manifest: ${{inputs.tool-manifest}}
      build_options: ${{inputs.options}}
    run: |
      ## actions/dotnet/restore-tools/action.yml#restore-tools
      import os, sys, pprint
      from pathlib import Path
      from contextlib import chdir

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      with chdir(str(os.getenv("build_path"))):
          options = list(str(os.getenv("build_options", "")).split("\n"))

          nuget_config = str(os.getenv("nuget-config", ""))
          if nuget_config:
              options.append(f"--configfile {nuget_config}")

          tool_manifest = str(os.getenv("tool-manifest", ""))
          if tool_manifest:
              options.append(f"--tool-manifest {tool_manifest}")

          cmd = "dotnet tool restore"
          if len(options):
              cmd += " ".join(options)

          print(cmd, flush=True)
          err = os.waitstatus_to_exitcode(os.system(cmd))
          exit(err)
