name: .NET Restore
description: >
  Script to restore (i.e. load) the dependencies .NET Solution or Projects before
  building

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  projects:
    description: >
      project(s) to build
      empty string (default) defers to project defaults
      whitespace separated list. can use glob pattern.
      empty string (default) defers to solution.
    required: false
    default: ''
  options:
    description: >
      supplementary command line options forwarded to `dotnet build`
      whitespace separated list.
    required: false
    default: ''

runs:
  using: composite
  steps:
  - id: build
    name: Build
    shell: python
    env:
      build_path: ${{inputs.path}}
      build_projects: ${{inputs.projects}}
      build_options: ${{inputs.options}}
    run: |
      import os, sys, itertools, subprocess, pprint
      from pathlib import Path
      from subprocess import CalledProcessError

      basedir = os.getcwd()
      os.chdir(str(os.getenv("build_path")))

      options = " ".join(list(str(os.getenv("build_options")).split()))
      projects = str(os.getenv("build_projects")).split()
      projects = [
          p
          for p in map(lambda f: [g.as_posix() for g in Path(".").rglob(f)], projects)
      ]
      projects = list(set([p for p in itertools.chain.from_iterable(projects)]))

      if len(projects) == 0:
          projects.append("")

      err = 0
      for project in projects:
          try:
              print(f"restoring {project}")
              command = f"dotnet restore {project} --disable-parallel {options}"
              print(command)
              # pprint.pp(os.environ)
              subprocess.check_call(command.split())
          except CalledProcessError as ex:
              print(f"ERROR: {ex}")
              err = ex.returncode
      os.chdir(basedir)
      exit(err)
