name: GCLIENT checkout
description: >
  Checkout using `gclient`.
  Works with every repo having a DEPS file at their root.

  This actions:
  - creates a `.gclient` configuration file at the root of the workspace
  - fetches recursively the indicated repos using gclient.

  NOTE: requires running e.g. gclient/setup to set up gclient beforehand

inputs:
  repository:
    description: Repository name with owner. For example, actions/checkout
    default: ${{github.repository}}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{github.token}}
  ssh-key:
    description: >
      SSH key used to fetch the repository. The SSH key is configured with the local
      git config, which enables your scripts to run authenticated git commands.
      The post-job step removes the SSH key.


      We recommend using a service account with the least permissions necessary.


      [Learn more about creating and using
      encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
  ssh-known-hosts:
    description: >
      Known hosts in addition to the user and global host key database. The public
      SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
      `ssh-keyscan github.com`. The public key for github.com is always implicitly
      added.
  ssh-strict:
    description: >
      Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
      and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts`
      to
      configure additional hosts.
    default: true
  ssh-user:
    description: >
      The user to use when connecting to the remote SSH host. By default 'git' is
      used.
    default: git
  persist-credentials:
    description: Whether to configure the token or SSH key with the local git config
    default: true
  path:
    description: Relative path under $GITHUB_WORKSPACE to place the repository
  clean:
    description: Whether to execute `git clean -ffdx && git reset --hard HEAD` before
      fetching
    default: true
  filter:
    description: >
      Partially clone against a given filter.
      Overrides sparse-checkout if set.
    default:
  sparse-checkout:
    description: >
      Do a sparse checkout on given patterns.
      Each pattern should be separated with new lines.
    default:
  sparse-checkout-cone-mode:
    description: >
      Specifies whether to use cone-mode when doing a sparse checkout.
    default: true
  fetch-depth:
    description: Number of commits to fetch. 0 indicates all history for all branches
      and tags.
    default: 1
  fetch-tags:
    description: Whether to fetch tags, even if fetch-depth > 0.
    default: false
  show-progress:
    description: Whether to show progress status output when fetching.
    default: true
  lfs:
    description: Whether to download Git-LFS files
    default: false
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive`
      to
      recursively checkout submodules.


      When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:`
      are
      converted to HTTPS.
    default: false
  set-safe-directory:
    description: Add repository path as safe.directory for Git global config by running
      `git config --global --add safe.directory <path>`
    default: true
  github-server-url:
    description: The base URL for the GitHub instance that you are trying to clone
      from, will use environment defaults to fetch from the same instance that the
      workflow is running from unless specified. Example URLs are https://github.com
      or https://my-ghes-server.example.com
    required: false


outputs:
  ref:
    description: The branch, tag or SHA that was checked out
    value: ${{steps.checkout-state.outputs.ref}}
  commit:
    description: The commit SHA that was checked out
    value: ${{steps.checkout-state.outputs.commit}}

runs:
  using: composite
  steps:

  - id: repo-url
    name: Get Repository URL
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_ssh_user: ${{inputs.ssh-user}}
      inputs_github_server_url: ${{inputs.github-server-url}}
    run: |
      import os
      from urllib.parse import urlparse

      inputs_repository = str(os.getenv("inputs_repository", ""))
      assert inputs_repository

      inputs_ssh_user = str(os.getenv("inputs_ssh_user", ""))

      repository_url = urlparse(inputs_repository)
      print(repository_url)
      if not repository_url or not repository_url.path.startswith("git@"):
          inputs_github_server_url = str(os.getenv("inputs_github_server_url", ""))
          assert inputs_github_server_url
          repository_url = urlparse(f"{inputs_github_server_url}/{inputs_repository}")

      assert repository_url

      if repository_url.scheme:
          # note: this is a full URL, so we can directly return it
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"url={repository_url.geturl()}")
              print(f"url={repository_url.geturl()}", file=fh)
      elif inputs_ssh_user and repository_url.path.startswith(f"{inputs_ssh_user}@"):
          # probably ssh url in git@url format
          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"url=ssh://{repository_url.geturl()}")
              print(f"url=ssh://{repository_url.geturl()}", file=fh)

  - id: configure-token
    if: ${{inputs.token != ''}}
    uses: kagekirin/gha-py-toolbox/actions/git/config-token@main
    with:
      repository: ${{steps.repo-url.outputs.url}}
      token: ${{inputs.token}}

  - id: configure-ssh-key
    if: ${{inputs.ssh-key != ''}}
    uses: kagekirin/gha-py-toolbox/actions/git/config-ssh@main
    with:
      repository: ${{steps.repo-url.outputs.url}}
      ssh-key: ${{inputs.ssh-key}}
      ssh-strict: ${{inputs.ssh-strict}}
      ssh-known-hosts: ${{inputs.ssh-known-hosts}}
      persist-credentials: ${{inputs.persist-credentials}}

  - id: clean
    shell: python
    env:
      inputs_clean: ${{inputs.clean}}
      inputs_path: ${{inputs.path}}
    run: |
      import os
      from pathlib import Path

      inputs_clean = os.getenv("inputs_clean") == "true"
      inputs_path = Path(os.getenv("inputs_path"))
      assert inputs_path

      if inputs_path.exists():
          if inputs_clean:
              inputs.path.unlink()


  - id: lfs-install
    if: ${{inputs.lfs == 'true'}}
    shell: python
    run: |
      import os

      err = os.waitstatus_to_exitcode(os.system("git lfs install"))
      exit(err)

  - id: gclient-config
    shell: python
    env:
      inputs_repository: ${{steps.repo-url.outputs.url}}
      inputs_ref: ${{inputs.ref}}
      inputs_path: ${{inputs.path}}
      inputs_deps: ${{inputs.deps-file}}
    run: |
      import os
      from pathlib import Path
      from urllib.parse import urlparse

      inputs_path = Path(os.getenv("inputs_path", "repo"))
      assert inputs_path

      inputs_repository = str(os.getenv("inputs_repository"))
      assert inputs_repository
      assert urlparse(inputs_repository)

      inputs_deps = str(os.getenv("inputs_deps"))
      assert inputs_deps

      solutions = [
          {
              "name": inputs_path,
              "url": inputs_repository,
              "deps_file": inputs_deps,
              "managed": True,
              "custom_deps": {},
              "custom_vars": {},
          }
      ]

      with Path(".gclient").open("w") as fh:
          print(f"solutions={solutions}")

  - id: gclient-sync
    shell: python
    env:
      inputs_show_progress: ${{inputs.show-progress}}
    run: |
      import os
      from pathlib import Path

      progress = (
          "--no-progress"
          if str(os.getenv("inputs_show_progress", "true")) == "false"
          else ""
      )

      assert Path(".gclient").exists()
      err = os.waitstatus_to_exitcode(os.system(f"gclient sync {progress} -j4"))
      exit(err)

  - id: gclient-recurse-lfs-checkout
    if: ${{inputs.lfs == 'true'}}
    shell: python
    env:
      inputs_show_progress: ${{inputs.show-progress}}
    run: |
      import os
      from pathlib import Path

      progress = (
          "--no-progress"
          if str(os.getenv("inputs_show_progress", "true")) == "false"
          else ""
      )

      assert Path(".gclient").exists()
      err = os.waitstatus_to_exitcode(
          os.system(f"gclient recurse {progress} -j4 git lfs checkout")
      )
      exit(err)

  - id: gclient-recurse-submodule-checkout
    if: ${{inputs.submodules == 'true'}}
    shell: python
    env:
      inputs_show_progress: ${{inputs.show-progress}}
    run: |
      import os
      from pathlib import Path

      progress = (
          "--no-progress"
          if str(os.getenv("inputs_show_progress", "true")) == "false"
          else ""
      )

      assert Path(".gclient").exists()
      err = os.waitstatus_to_exitcode(
          os.system(f"gclient recurse {progress} -j4 git submodule update --init")
      )
      exit(err)

  - id: gclient-recurse-fetch-tags
    if: ${{inputs.fetch-tags == 'true'}}
    shell: python
    env:
      inputs_show_progress: ${{inputs.show-progress}}
    run: |
      import os
      from pathlib import Path

      progress = (
          "--no-progress"
          if str(os.getenv("inputs_show_progress", "true")) == "false"
          else ""
      )

      assert Path(".gclient").exists()
      err = os.waitstatus_to_exitcode(
          os.system(f"gclient recurse {progress} -j4 git fetch --tags")
      )
      exit(err)


  - id: checkout-state
    shell: python
    env:
      inputs_path: ${{inputs.path}}
    run: |
      import os, subprocess

      inputs_path = Path(os.getenv("inputs_path", "."))
      assert inputs_path

      ref = subprocess.check_output(
          "git -C {inputs_path} symbolic-ref --short HEAD".split()
      ).decode()
      commit = subprocess.check_output(
          "git -C {inputs_path} rev-parse --short HEAD".split()
      ).decode()

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"ref={ref}")
          print(f"ref={ref}", file=fh)
          print(f"commit={commit}")
          print(f"commit={commit}", file=fh)

  - id: set-safe-directory
    uses: kagekirin/gha-py-toolbox/actions/git/config-safe-dir@main
    with:
      path: ${{inputs.path}}
