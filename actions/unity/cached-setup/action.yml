name: UNITY cached setup
description: >-
  Downloads and installs Unity at the given version/changeset and for the given platform
  using the release tarballs.
  Results are cached for faster workflows.

  **WARNING: only Linux supported for now**

inputs:
  version:
    description: >-
      Unity version to install.
      Refer to https://unity.com/releases/editor/archive for the correct version.
    required: true
    default: 2021.3.21f1
  changeset:
    description: >-
      Unity changeset to install.
      Refer to https://unity.com/releases/editor/archive for the correct changeset.

      NOTE: The changeset is part of the actual download URL, i.e. https://download.unity3d.com/download_unity/{changeset}
      e.g.: https://download.unity3d.com/download_unity/1b156197d683/LinuxEditorInstaller/Unity-2021.3.21f1.tar.xz
    required: true
    default: 1b156197d683
  components:
    description: >-
      List of Unity components to install.

      Multiline, use whitespace/newline to separate items.
    required: true
    default: |
      Linux-IL2CPP
      Linux-Server
      WebGL
  unity-path:
    description: path where to install Unity to
    required: true
    default: .unity
  unity-temp:
    description: temp path where to download Unity installers to
    required: true
    default: .unitysetup
  cache-prefix:
    description: Prefix for cache to make it unique
    required: true
    default: UCS

outputs:
  unity-exe:
    description: full path to where Unity executable
    value: ${{ steps.get-unity-exe.outputs.unity }}
  editor-path:
    description: full path to where Unity installation folder
    value: ${{ steps.get-unity-exe.outputs.editor }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: download-url
    name: Generate download URL for Unity ${{ inputs.version }} and ${{ inputs.changeset }}
    shell: python
    env:
      unity_changeset: ${{ inputs.changeset }}
      unity_baseurl: https://download.unity3d.com/download_unity/
    run: |
      import os, sys
      from urllib.parse import urlparse
      from posixpath import join

      unity_version = str(os.getenv("unity_version"))
      unity_changeset = str(os.getenv("unity_changeset"))

      unity_baseurl = str(os.getenv("unity_baseurl"))
      assert unity_baseurl
      assert urlparse(unity_baseurl)

      installer_url = join(unity_baseurl, unity_changeset)
      assert installer_url
      assert urlparse(installer_url)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"url={installer_url}")
          print(f"url={installer_url}", file=fh)


  - id: restore-installation-cache
    name: Restore installation cache
    uses: actions/cache/restore@v4
    with:
      path: ${{ inputs.unity-path }}
      key: ${{inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.unity-path }}-${{ inputs.version }}-${{ inputs.changeset }}-${{ join(inputs.components, '-') }}


  - id: restore-download-cache
    if: steps.restore-installation-cache.outputs.cache-hit != 'true'
    name: Restore download cache
    uses: actions/cache/restore@v4
    with:
      path: ${{ inputs.unity-temp }}
      key: ${{inputs.cache-prefix }}-${{ runner.os }}-${{ inputs.unity-temp }}-${{ inputs.version }}-${{ inputs.changeset }}


  - id: download-editor
    if: steps.restore-installation-cache.outputs.cache-hit != 'true' && steps.restore-installation-cache.outputs.cache-hit != 'true'
    name: Download Unity Editor from ${{ steps.download-url.outputs.url }}
    shell: python
    env:
      download_url: ${{ steps.download-url.outputs.url }}
      unity_version: ${{ inputs.version }}
      unity_temp: ${{ inputs.unity-temp }}
    run: |
      import os, sys, requests, shutil
      from pathlib import Path
      from urllib.parse import urlparse
      from posixpath import join

      unity_temp = Path(os.getenv("unity_temp"))
      unity_temp.mkdir(parents=True, exist_ok=True)
      unity_version = str(os.getenv("unity_version"))

      download_url = str(os.getenv("download_url"))
      assert download_url
      assert urlparse(download_url)

      editor_url = join(
          download_url,
          "LinuxEditorInstaller",
          f"Unity-{unity_version}.tar.xz",
      )
      assert editor_url
      assert urlparse(editor_url)

      editor_path = Path.joinpath(unity_temp, Path(editor_url).name)

      with requests.get(editor_url, stream=True) as r:
          if not r.ok:
              print(
                  f"failed to access {editor_url} with status {r.status_code} {r.reason}"
              )
          assert r.ok
          if r.ok:
              with editor_path.open("wb") as fh:
                  shutil.copyfileobj(r.raw, fh)

      unity_temp_contents = list(unity_temp.rglob("*.*"))
      print(f"contents of {unity_temp}: {unity_temp_contents}")

  - id: download-components
    if: steps.restore-installation-cache.outputs.cache-hit != 'true' && steps.restore-installation-cache.outputs.cache-hit != 'true'
    name: Download Unity Components from ${{ steps.download-url.outputs.url }}
    shell: python
    env:
      download_url: ${{ steps.download-url.outputs.url }}
      unity_version: ${{ inputs.version }}
      unity_components: ${{ inputs.components }}
      unity_temp: ${{ inputs.unity-temp }}
    run: |
      import os, sys, requests, shutil
      from pathlib import Path
      from urllib.parse import urlparse
      from posixpath import join

      unity_temp = Path(os.getenv("unity_temp"))
      unity_temp.mkdir(parents=True, exist_ok=True)

      unity_version = str(os.getenv("unity_version"))
      unity_components = list(str(os.getenv("unity_components")).split())

      download_url = str(os.getenv("download_url"))
      assert download_url
      assert urlparse(download_url)

      for component in unity_components:
          component_url = join(
              download_url,
              "LinuxEditorTargetInstaller",
              f"UnitySetup-{component}-Support-for-Editor-{unity_version}.tar.xz",
          )
          assert component_url
          assert urlparse(component_url)

          component_path = Path.joinpath(unity_temp, Path(component_url).name)

          with requests.get(component_url, stream=True) as r:
              if not r.ok:
                  print(
                      f"failed to access {component_url} with status {r.status_code} {r.reason}"
                  )
              assert r.ok
              if r.ok:
                  with component_path.open("wb") as fh:
                      shutil.copyfileobj(r.raw, fh)

      unity_temp_contents = list(unity_temp.rglob("*.*"))
      print(f"contents of {unity_temp}: {unity_temp_contents}")


  - id: save-download-cache
    if: steps.restore-installation-cache.outputs.cache-hit != 'true'
    name: Save download cache
    uses: actions/cache/save@v4
    with:
      path: ${{ inputs.unity-temp }}
      key: ${{ steps.restore-download-cache.outputs.cache-primary-key }}


  - id: unpack
    if: steps.restore-installation-cache.outputs.cache-hit != 'true'
    name: Unpack from ${{ inputs.unity-temp }} into ${{ inputs.unity-path }}
    shell: python
    env:
      unity_version: ${{ inputs.version }}
      unity_components: ${{ inputs.components }}
      unity_temp: ${{ inputs.unity-temp }}
      unity_path: ${{ inputs.unity-path }}
    run: |
      import os, sys, shutil
      from pathlib import Path

      unity_temp = Path(os.getenv("unity_temp"))
      unity_temp.mkdir(parents=True, exist_ok=True)
      unity_temp_contents = list(unity_temp.rglob("*.*"))
      print(f"contents of {unity_temp}: {unity_temp_contents}")

      unity_path = Path(os.getenv("unity_path"))
      unity_path.mkdir(parents=True, exist_ok=True)
      unity_path_contents = list(unity_path.rglob("*.*"))
      print(f"contents of {unity_path}: {unity_path_contents}")
      os.system(f"ls -alG {unity_path}")

      unity_version = str(os.getenv("unity_version"))
      unity_components = list(str(os.getenv("unity_components")).split())

      components = [f"Unity-{unity_version}.tar.xz"]
      components += map(
          lambda x: f"UnitySetup-{x}-{unity_version}.tar.xz", unity_components
      )
      print(f"components to install: {components}")

      for component in components:
          for archive in [r for r in unity_temp_contents if component == r.name]:
              print(f"extracting: {archive} for {component}")
              shutil.unpack_archive(archive, unity_path.absolute())

      unity_path_contents = list(unity_path.rglob("*.*"))
      print(f"contents of {unity_path}: {unity_path_contents}")


  - id: save-installation-cache
    name: Save installation cache
    uses: actions/cache/save@v4
    with:
      path: ${{ inputs.unity-path }}
      key: ${{ steps.restore-installation-cache.outputs.cache-primary-key }}


  - id: get-unity-exe
    name: Retrieve installed Unity executable
    shell: python
    env:
      unity_path: ${{ inputs.unity-path }}
    run: |
      import os, sys
      from pathlib import Path

      unity_path = Path(os.getenv("unity_path"))

      unities = list(
          filter(
              lambda x: x.is_file() and os.access(x.absolute(), os.X_OK),
              unity_path.rglob("Unity"),
          )
      )
      print(f"executables: {unities}")
      unity_exe = unities[0]

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"unity={unity_exe.absolute()}")
          print(f"unity={unity_exe.absolute()}", file=fh)
          print(f"editor={unity_exe.parent.absolute()}")
          print(f"editor={unity_exe.parent.absolute()}", file=fh)
