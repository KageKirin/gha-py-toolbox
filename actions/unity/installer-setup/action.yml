name: UNITY cached installer-based setup
description: >-
  Downloads and installs Unity at the given version/changeset and for the given platform
  using the official installer.

  **WARNING: only Linux supported for now**

inputs:
  version:
    description: >-
      Unity version to install.
      Refer to https://unity.com/releases/editor/archive for the correct version.
    required: true
    default: 2021.3.21f1
  changeset:
    description: >-
      Unity changeset to install.
      Refer to https://unity.com/releases/editor/archive for the correct changeset.

      NOTE: The changeset is part of the actual download URL, i.e. https://download.unity3d.com/download_unity/{changeset}
      e.g.: https://download.unity3d.com/download_unity/1b156197d683/LinuxEditorInstaller/Unity-2021.3.21f1.tar.xz
    required: true
    default: 1b156197d683
  components:
    description: >-
      List of Unity components to install.

      Multiline, use whitespace/newline to separate items.
    required: true
    default: |
      Linux-IL2CPP
      Linux-Server
      WebGL
  accept-license:
    description: >-
      Whether you accept the Unity license.

      Must be explicitly set by the caller.
    required: true
  unity-path:
    description: path where to install Unity to
    required: true
    default: .unity
  unity-temp:
    description: temp path where to download Unity installers to
    required: true
    default: .unitysetup


outputs:
  unity-exe:
    description: full path to Unity executable
    value: ${{steps.get-unity-exe.outputs.unity}}
  editor-path:
    description: full path to Unity installation folder
    value: ${{steps.get-unity-exe.outputs.editor}}


runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: installer-url
    name: Generate installer URL for Unity ${{inputs.version}} and ${{inputs.changeset}}
    shell: python
    env:
      unity_version: ${{inputs.version}}
      unity_changeset: ${{inputs.changeset}}
      unity_baseurl: https://download.unity3d.com/download_unity/
    run: |
      ## actions/unity/installer-setup/action.yml#installer-url
      import os, sys
      from urllib.parse import urlparse
      from posixpath import join

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      unity_version = str(os.getenv("unity_version"))
      unity_changeset = str(os.getenv("unity_changeset"))

      unity_baseurl = str(os.getenv("unity_baseurl"))
      assert unity_baseurl is not None
      assert urlparse(unity_baseurl) is not None

      installer_url = join(
          unity_baseurl, unity_changeset, f"UnitySetup-{unity_version}"
      )

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"url={installer_url}")
          print(f"url={installer_url}", file=fh)


  - id: download-installer
    name: Download installer from ${{steps.installer-url.outputs.url}}
    shell: python
    env:
      installer_url: ${{steps.installer-url.outputs.url}}
      unity_temp: ${{inputs.unity-temp}}
    run: |
      ## actions/unity/installer-setup/action.yml#download-installer
      import os, sys, requests, shutil
      from pathlib import Path
      from urllib.parse import urlparse

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      unity_temp = Path(os.getenv("unity_temp"))
      unity_temp.mkdir(parents=True, exist_ok=True)

      installer_url = str(os.getenv("installer_url"))
      assert installer_url is not None
      assert urlparse(installer_url) is not None

      installer_path = Path.joinpath(unity_temp, Path(installer_url).name)

      with requests.get(installer_url, stream=True) as r:
          if not r.ok:
              print(
                  f"failed to access {installer_url} with status {r.status_code} {r.reason}"
              )
          assert r.ok
          if r.ok:
              with installer_path.open("wb") as fh:
                  shutil.copyfileobj(r.raw, fh)
              installer_path.chmod(0o777)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"path={installer_path}")
          print(f"path={installer_path}", file=fh)

  - id: run-installer
    name: Download installer from ${{steps.installer-url.outputs.url}}
    shell: python
    env:
      installer_path: ${{steps.download-installer.outputs.path}}
      unity_path: ${{inputs.unity-path}}
      unity_components: |
        Unity
        ${{inputs.components}}
      accept_license: ${{inputs.accept-license}}
    run: |
      ## actions/unity/installer-setup/action.yml#run-installer
      import os, sys, requests, subprocess
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      installer_path = Path(os.getenv("installer_path"))
      print("installer_path:", installer_path, flush=True)

      unity_path = Path(os.getenv("unity_path"))
      print("unity_path:", unity_path, unity_path.absolute(), flush=True)

      unity_components = list(str(os.getenv("unity_components")).split())
      print("unity_components:", unity_components, flush=True)

      accept_license = os.getenv("accept_license") == "true"
      print("accept_license:", accept_license, flush=True)


      assert installer_path.exists()
      subprocess.run([installer_path, "--help"], check=True)
      subprocess.run(
          [installer_path, "--unattended", "--list-components"], check=True
      )
      subprocess.run(
          [
              installer_path,
              "--unattended",
              f"--install-location={unity_path.absolute()}",
              f'--components={",".join(unity_components)}',
          ],
          input="y" if accept_license else "n",
          check=True,
          text=True,
      )


  - id: get-unity-exe
    name: Retrieve installed Unity executable
    shell: python
    env:
      unity_path: ${{inputs.unity-path}}
    run: |
      ## actions/unity/installer-setup/action.yml#get-unity-exe
      import os, sys
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      unity_path = Path(os.getenv("unity_path"))

      unities = [
          x
          for x in unity_path.absolute().rglob("Unity")
          if x.is_file() and os.access(x.absolute(), os.X_OK)
      ]
      print(f"executables: {unities}")
      assert len(unities) > 0
      unity_exe = unities[0]

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"unity={unity_exe.absolute()}")
          print(f"unity={unity_exe.absolute()}", file=fh)
          print(f"editor={unity_exe.parent.absolute()}")
          print(f"editor={unity_exe.parent.absolute()}", file=fh)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      ## actions/unity/installer-setup/action.yml#verify-outputs
      steps.get-unity-exe.outputs.unity-exe
      ${{steps.get-unity-exe.outputs.unity-exe}}

      steps.get-unity-exe.outputs.editor-path
      ${{steps.get-unity-exe.outputs.editor-path}}
