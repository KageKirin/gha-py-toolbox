name: UNITY activate license
description: >-
  Activate a Unity license.

  NOTE: this action has a post action to return the license.

inputs:
  unity-exe:
    description: >-
      Path to Unity executable.
      This value is usually returned by the setup action.
    required: true

  unity-email:
    description: >-
      User email required to activate license.
    required: true
  unity-password:
    description: >-
      User password required to activate license.
    required: true
  unity-serial:
    description: >-
      User serial required to activate license.
    required: false
  unity-license-file:
    description: >-
      User license file (.ulf) required to activate license.
    required: false

  timeout:
    description: timeout in seconds between activation retries
    required: false
    default: '15'
  retries:
    description: number of retries before giving up on the activation
    required: false
    default: '15'

runs:
  using: composite
  steps:
  - id: activate-license
    uses: kagekirin/gha-py-toolbox/actions/util/post@main
    name: Activate License
    env:
      input_unity_exe: ${{ inputs.unity-exe }}
      input_unity_email: ${{ inputs.unity-email }}
      input_unity_password: ${{ inputs.unity-password }}
      input_unity_serial: ${{ inputs.unity-serial }}
      input_unity_license_file: ${{ inputs.unity-license-file }}
      input_timeout: ${{ inputs.timeout }}
      input_retries: ${{ inputs.retries }}
    with:
      shell: python
      main: |
        import os, sys, time, subprocess
        from pathlib import Path

        unity_exe = Path(os.getenv("input_unity_exe"))
        assert unity_exe
        assert unity_exe.is_file()

        unity_email = str(os.getenv("input_unity_email"))
        assert unity_email

        unity_password = str(os.getenv("input_unity_password"))
        assert unity_password

        unity_serial = str(os.getenv("input_unity_serial"))
        unity_license_file = str(os.getenv("input_unity_license_file"))

        timeout = int(os.getenv("input_timeout"))
        retries = int(os.getenv("input_retries"))

        print(f"registering Unity license for {unity_email}")



        command = []
        if unity_serial:
          print(f"registering using serial {unity_serial}")
          command = [
            str(unity_exe.absolute()),
            "-quit",
            "-nographics",
            "-batchmode",
            "-logFile", "-",
            "-serial",  unity_serial,
            "-username",  unity_email,
            "-password",  unity_password,
          ]

        elif unity_license_file:
          print(f"registering using license file {unity_license_file}")
          Path("license.ulf").write_text(unity_license_file)
          command = [
            str(unity_exe.absolute()),
            "-quit",
            "-nographics",
            "-batchmode",
            "-logFile", "-",
            "-manualLicenseFile",  "license.ulf",
            "-username",  unity_email,
            "-password",  unity_password,
          ]

        cmd = " ".join(command)
        print(cmd)
        for retry in range(1, retries + 1):
          print(f"activation attempt #{retry}")
          err = os.waitstatus_to_exitcode(os.system(cmd))
          if err == 0:
            break
          print(f"failed activation attempt #{retry}")
          time.sleep(timeout * retry)

        exit(err)

      post: |
        import os, sys, time, subprocess
        from pathlib import Path

        unity_exe = Path(os.getenv("input_unity_exe"))
        assert unity_exe
        assert unity_exe.is_file()

        unity_email = str(os.getenv("input_unity_email"))
        assert unity_email

        unity_password = str(os.getenv("input_unity_password"))
        assert unity_password

        timeout = int(os.getenv("input_timeout"))
        retries = int(os.getenv("input_retries"))

        print(f"returning Unity license for {unity_email}")
        command = [
            str(unity_exe.absolute()),
            "-quit",
            "-nographics",
            "-batchmode",
            "-logFile", "-",
            "-returnlicense",
            "-username",  unity_email,
            "-password",  unity_password,
          ]

        cmd = " ".join(command)
        print(cmd)
        for retry in range(1, retries + 1):
          print(f"license return attempt #{retry}")
          err = os.waitstatus_to_exitcode(os.system(cmd))
          if err == 0:
            break
          print(f"failed license return attempt #{retry}")
          time.sleep(timeout * retry)

        exit(err)
