# same as dotnet/get-packages-versions
# + return .scoped as dict ( registry url => {packages, versions} )



name: UNITY get packages versions
description: >
  Retrieves and filters the packages referenced by a given project or props file.

  Returns a JSON string of a dictionary mapping package name to its version.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}

  registry:
    description: >
      Registry URL to filter by scopedRegistries **if** manifest.json exists.
      Ignored if it doesn't and everything is handled using the provided registry as sole registry.

      Defaults to official Unity NPM registry: https://packages.unity.com
    required: false
    default: https://packages.unity.com
  package-regex:
    description: >
      Whitespace-separated list.
    required: true
  configuration-files:
    description: >
      Configuration file (manifest.json or package.json) to check for packages.
      Defaults to package.json.
    required: false
    default: package.json
  upm-configuration-file:
    description: >
      UPM Configuration file (manifest.json) to check for registry mapping.
      Defaults to Packages/manifest.json.

      Can be set to empty string (''), in which case only the provided registry will be considered.
    required: false
    default: Packages/manifest.json

outputs:
  packages:
    description: JSON string of dictionary mapping the retrieved packages to their respective versions
    value: ${{ fromJSON(steps.get-package-versions.outputs.packages) }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >


  - id: get-package-versions
    name: Get package versions
    shell: python
    env:
      inputs_path: ${{ inputs.path }}
      inputs_registry: ${{ inputs.registry }}
      inputs_package_regex: ${{ inputs.package-regex }}
      inputs_configuration_files: ${{ inputs.configuration-files }}
      inputs_upm_configuration_file: ${{ inputs.upm-configuration-file }}
    run: |
      ## actions/unity/get-packages-versions/action.yml#get-package-versions
      import os, sys, re, json, pprint, itertools
      from pathlib import Path
      from contextlib import chdir

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      configuration_files = str(os.getenv("inputs_configuration_files")).split()
      assert configuration_files is not None

      registry = str(os.getenv("inputs_registry", "https://packages.unity.com"))
      assert registry is not None

      packages = dict()
      with chdir(os.getenv("inputs_path", ".")):
          for project_config in itertools.chain.from_iterable(
              [Path(".").rglob(f) for f in configuration_files]
          ):
              print(project_config)
              assert project_config.is_file()

              root = json.loads(project_config.read_text())
              for node in root["dependencies"]:
                  package_name = node
                  package_version = root["dependencies"][node]
                  if package_name not in packages:
                      packages[package_name] = package_version

          print("packages, before filtering:")
          pprint.pp(packages)

          upm_config = Path(os.getenv("inputs_upm_configuration_file"))
          print(upm_config)
          if upm_config.is_file():
              package_patterns = []
              manifest_root = json.loads(upm_config.read_text())
              registries = manifest_root["scopedRegistries"]

              print(registries)

              mapping = dict(
                  zip(
                      [r["url"] for r in registries],
                      [
                          (r["scopes"] if r["scopes"] is not None else [])
                          for r in registries
                      ],
                  )
              )
              pprint.pp(mapping)

              if registry in mapping:
                  package_patterns.extend(mapping[registry])

          ## Special case for Unity: handle all scopedRegistries patterns as antipatterns => none must match
          if registry.startswith("https://packages.unity.com"):
              package_anti_patterns = list(
                  itertools.chain.from_iterable(mapping.values())
              )
              packages = {
                  k: v
                  for (k, v) in packages.items()
                  if not any([k.startswith(p) for p in package_anti_patterns])
              }
          else:
              packages = {
                  k: v
                  for (k, v) in packages.items()
                  if any([k.startswith(p) for p in package_patterns])
              }

          print("packages, after nuget filtering:")
          pprint.pp(packages)
      package_regex = str(os.getenv("inputs_package_regex", "")).split()
      if package_regex and len(package_regex):
          packages = {
              k: v
              for (k, v) in packages.items()
              if any([re.match(p, k) for p in package_regex])
          }
          print("packages, after regex filtering:")
          pprint.pp(packages)

      packages_json_escaped = json.dumps(json.dumps(packages, sort_keys=True))
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"packages={packages_json_escaped}")
          print(f"packages={packages_json_escaped}", file=fh)


  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      ## actions/unity/get-packages-versions/action.yml#verify-outputs
      ## actions/dotnet/get-packages-versions/action.yml#verify-outputs
      steps.get-package-versions.outputs.packages
      ${{steps.get-package-versions.outputs.packages}}

      steps.get-package-versions.outputs.packages
      ${{steps.get-package-versions.outputs.packages}}
      ${{fromJSON(steps.get-package-versions.outputs.packages)}}
