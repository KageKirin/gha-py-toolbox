name: UNITY cached direct setup
description: >-
  Downloads and installs Unity at the given version/changeset and for the given platform
  using the release tarballs.
  Results are cached for faster workflows.

  This version relies on curl and tar by piping the download/output from curl directly
  into tar.

  **WARNING: only Linux supported for now**

inputs:
  version:
    description: >-
      Unity version to install.
      Refer to https://unity.com/releases/editor/archive for the correct version.
    required: true
    default: 2021.3.21f1
  changeset:
    description: >-
      Unity changeset to install.
      Refer to https://unity.com/releases/editor/archive for the correct changeset.

      NOTE: The changeset is part of the actual download URL, i.e. https://download.unity3d.com/download_unity/{changeset}
      e.g.: https://download.unity3d.com/download_unity/1b156197d683/LinuxEditorInstaller/Unity-2021.3.21f1.tar.xz
    required: true
    default: 1b156197d683
  components:
    description: >-
      List of Unity components to install.

      Multiline, use whitespace/newline to separate items.
    required: true
    default: |
      Linux-IL2CPP
      Linux-Server
      WebGL
  unity-path:
    description: path where to install Unity to
    required: true
    default: .unity
  unity-temp:
    description: temp path where to download Unity installers to
    required: true
    default: .unitysetup
  verbose:
    description: verbose output for both curl and tar (default is false)
    required: true
    default: 'false'
  cache-prefix:
    description: Prefix for cache to make it unique
    required: true
    default: UCDS

outputs:
  unity-exe:
    description: full path to Unity executable
    value: ${{steps.get-unity-exe.outputs.unity}}
  editor-path:
    description: full path to Unity installation folder
    value: ${{steps.get-unity-exe.outputs.editor}}


runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: download-url
    name: Generate download URL for Unity ${{inputs.version}} and ${{inputs.changeset}}
    shell: python
    env:
      unity_changeset: ${{inputs.changeset}}
      unity_baseurl: https://download.unity3d.com/download_unity/
    run: |
      import os, sys
      from urllib.parse import urlparse
      from posixpath import join

      unity_version = str(os.getenv("unity_version"))
      unity_changeset = str(os.getenv("unity_changeset"))

      unity_baseurl = str(os.getenv("unity_baseurl"))
      assert unity_baseurl
      assert urlparse(unity_baseurl)

      installer_url = join(unity_baseurl, unity_changeset)
      assert installer_url
      assert urlparse(installer_url)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"url={installer_url}")
          print(f"url={installer_url}", file=fh)


  - id: restore-installation-cache
    name: Restore installation cache
    uses: actions/cache/restore@v4
    with:
      path: ${{inputs.unity-path}}
      key: ${{inputs.cache-prefix}}-${{runner.os}}-${{inputs.unity-path}}-${{inputs.version}}-${{inputs.changeset}}-${{join(inputs.components,'-')}}


  - id: download-unpack-editor
    if: ${{steps.restore-installation-cache.outputs.cache-hit != 'true'}}
    name: Download Unity Editor from ${{steps.download-url.outputs.url}}
    shell: python
    env:
      download_url: ${{steps.download-url.outputs.url}}
      unity_version: ${{inputs.version}}
      unity_path: ${{inputs.unity-path}}
      verbose: ${{inputs.verbose}}
    run: |
      import os, sys
      from pathlib import Path
      from urllib.parse import urlparse
      from posixpath import join

      verbose = str(os.getenv("verbose")) == "true"
      curl_verbose = "--verbose" if verbose else "--silent"
      tar_verbose = "--verbose" if verbose else ""

      unity_path = Path(os.getenv("unity_path"))
      unity_path.mkdir(parents=True, exist_ok=True)
      unity_version = str(os.getenv("unity_version"))

      download_url = str(os.getenv("download_url"))
      assert download_url
      assert urlparse(download_url)

      editor_url = join(
          download_url, "LinuxEditorInstaller", f"Unity-{unity_version}.tar.xz"
      )
      assert editor_url
      assert urlparse(editor_url)

      basedir = os.getcwd()
      os.chdir(unity_path)
      cmd = f"curl {curl_verbose} {editor_url} | tar xJ {tar_verbose}"
      print(cmd)
      err = os.waitstatus_to_exitcode(os.system(cmd))
      os.chdir(basedir)
      exit(err)

  - id: download-unpack-components
    if: ${{steps.restore-installation-cache.outputs.cache-hit != 'true'}}
    name: Download Unity Components from ${{steps.download-url.outputs.url}}
    shell: python
    env:
      download_url: ${{steps.download-url.outputs.url}}
      unity_version: ${{inputs.version}}
      unity_components: ${{inputs.components}}
      unity_path: ${{inputs.unity-path}}
      verbose: ${{inputs.verbose}}
    run: |
      import os, sys, requests, shutil
      from pathlib import Path
      from urllib.parse import urlparse
      from posixpath import join

      verbose = str(os.getenv("verbose")) == "true"
      curl_verbose = "--verbose" if verbose else "--silent"
      tar_verbose = "--verbose" if verbose else ""

      unity_path = Path(os.getenv("unity_path"))
      assert unity_path.is_dir()

      unity_version = str(os.getenv("unity_version"))
      unity_components = list(str(os.getenv("unity_components")).split())
      download_url = str(os.getenv("download_url"))
      assert download_url
      assert urlparse(download_url)

      basedir = os.getcwd()
      os.chdir(unity_path)

      err = 0
      for component in unity_components:
          component_url = join(
              download_url,
              "LinuxEditorTargetInstaller",
              f"UnitySetup-{component}-Support-for-Editor-{unity_version}.tar.xz",
          )
          assert component_url
          assert urlparse(component_url)

          cmd = f"curl {curl_verbose} {component_url} | tar xJ {tar_verbose}"
          print(cmd)
          err = os.waitstatus_to_exitcode(os.system(cmd))
          if err != 0:
              print(f"failed to to download {component_url}")
              break

      os.chdir(basedir)
      exit(err)


  - id: save-installation-cache
    name: Save installation cache
    uses: actions/cache/save@v4
    with:
      path: ${{inputs.unity-path}}
      key: ${{steps.restore-installation-cache.outputs.cache-primary-key}}


  - id: get-unity-exe
    name: Retrieve installed Unity executable
    shell: python
    env:
      unity_path: ${{inputs.unity-path}}
    run: |
      import os, sys
      from pathlib import Path

      unity_path = Path(os.getenv("unity_path"))

      unities = list(
          filter(
              lambda x: x.is_file() and os.access(x.absolute(), os.X_OK),
              unity_path.rglob("Unity"),
          )
      )
      print(f"executables: {unities}")
      unity_exe = unities[0]

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"unity={unity_exe.absolute()}")
          print(f"unity={unity_exe.absolute()}", file=fh)
          print(f"editor={unity_exe.parent.absolute()}")
          print(f"editor={unity_exe.parent.absolute()}", file=fh)
