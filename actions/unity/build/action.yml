name: UNITY build
description: >-
  Builds a project using Unity Editor.

  NOTE: requires license activation to be handled beforehand.

  **WARNING: only Linux ~~supported~~ tested for now**

inputs:
  unity-exe:
    description: >-
      Path to Unity executable.
      This value is usually returned by the setup action.
    required: true

  project-path:
    description: >-
      Path to Unity project.
      Defaults to workspace.
    required: true
    default: ${{github.workspace}}

  output-path:
    description: >-
      Path to project output binary.
      Defaults to workspace/build/<reponame>.
      Must contain the platform-specific file extension (.exe, .app) for platforms requiring such.
      Default build is Linux, so no extension is actually fine.
    required: true
    default: ${{github.workspace}}/build/${{github.repository}}

  arguments:
    description: >-
      Build arguments forwarded as-is to Unity.

      "-quit", "-batchmode" and "-nographics" are passed by default.
      "-logfile -"

      The argument for "-projectPath" is added from `inputs.project_path`.
      Use the variable `{buildpath}` for indicating the build (output) path.
      Example: default value below
    required: true
    default: -enablePackageManagerTraces -buildLinux64Player {buildpath}

  cache-artifacts:
    description: >-
      Whether to cache the build artifacts.
      Caching allows follow up jobs to re-use the build artifacts from the job calling this macro.

      This is especially useful for functionality and unit testing since rebuilding the application
      might take some time.
    required: false
    default: false
  cache-name:
    description: >-
      Name to give to cache
    required: false
    default: ${{runner.os}}-${{github.repository_id}}-${{github.head_ref}}-${{github.sha}}-${{github.run_id}}

outputs:
  build-path:
    description: path to build artifact (directory)
    value: ${{ steps.check-build-results.outputs.build_dir }}
  build-exe:
    description: path to build artifact (executable)
    value: ${{ steps.check-build-results.outputs.build_exe }}



runs:
  using: composite
  steps:
  - id: verify-inputs
    name: Verify inputs
    shell: cat {0}
    run: |
      ## actions/unity/build/action.yml#verify-inputs
      inputs.unity-exe: ${{ inputs.unity-exe }}
      inputs.project-path: ${{ inputs.project-path }}
      inputs.output-path: ${{ inputs.output-path }}
      inputs.arguments: ${{ inputs.arguments }}

  - id: check-inputs
    name: Check inputs _before_ building
    shell: python
    env:
      inputs_unity_exe: ${{ inputs.unity-exe }}
      inputs_unity_path: ${{ inputs.unity-path }}
      inputs_output_path: ${{ inputs.output-path }}
      inputs_project_path: ${{ inputs.path }}

    run: |
      ## actions/unity/build/action.yml#check-inputs
      import os
      from pathlib import Path

      github_workspace = str(os.getenv("GITHUB_WORKSPACE"))
      assert github_workspace is not None

      inputs_unity_exe = str(os.getenv("inputs_unity_exe"))
      assert inputs_unity_exe is not None

      inputs_project_path = str(os.getenv("inputs_project_path"))
      assert inputs_project_path is not None

      inputs_output_path = str(os.getenv("inputs_output_path"))
      assert inputs_output_path is not None

      unity_exe = Path(inputs_unity_exe)
      unity_path = Path(inputs_unity_exe)
      project_path = Path(inputs_project_path)
      output_path = Path(inputs_output_path)

      print("github_workspace:", github_workspace)
      print("abs(github_workspace):", Path(github_workspace).absolute())

      print("unity_exe:", unity_exe, unity_exe.exists())
      print("abs(unity_exe):", unity_exe.absolute())

      print("project_path:", project_path, project_path.exists())
      print("abs(project_path):", project_path.absolute())

      print(
          "output_path:",
          output_path,
          output_path.exists(),
          output_path.parent.exists(),
      )
      print("abs(output_path):", output_path.absolute())

      assert unity_exe.exists()
      assert unity_exe.is_file()

      assert project_path.exists()
      assert project_path.is_dir()

      assert output_path is not None
      if not output_path.parent.exists():
          output_path.parent.mkdir(parents=True, exist_ok=True)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"output_dir={output_path.parent}")
          print(f"output_dir={output_path.parent}", file=fh)


  - id: build
    name: Build project ${{inputs.project-path}}
    shell: python
    env:
      input_unity_exe: ${{inputs.unity-exe}}
      input_project_path: ${{inputs.project-path}}
      input_output_path: ${{inputs.output-path}}
      input_arguments: ${{inputs.arguments}}
    run: |
      ## actions/unity/build/action.yml#build
      import os, sys, subprocess
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WORKSPACE", "."))

      unity_exe = Path(os.getenv("input_unity_exe"))
      assert unity_exe is not None
      assert unity_exe.is_file()

      project_path = Path(os.getenv("input_project_path"))
      assert project_path is not None
      assert project_path.is_dir()

      output_path = Path(os.getenv("input_output_path"))
      assert output_path is not None
      output_path.parent.is_dir()

      inputs_arguments = str(os.getenv("input_arguments"))
      arguments = inputs_arguments.format(
          buildpath=str(output_path.absolute())
      ).split()

      command = [
          str(unity_exe.absolute()),
          "-quit",
          "-nographics",
          "-batchmode",
          "-logFile",
          "-",
          "-projectPath",
          str(project_path.absolute()),
      ] + arguments
      cmd = " ".join(command)
      print(f"executing '{cmd}'", flush=True)
      err = os.waitstatus_to_exitcode(os.system(cmd))
      print(err)
      exit(err)


  - id: locate-build-artifacts
    uses: kagekirin/gha-py-toolbox/actions/util/locate-files@main
    with:
      path: ${{steps.check-inputs.outputs.output_dir}}
      patterns: '*.*'
      depth: -1

  - id: check-build-results
    name: Check build check-build-results
    shell: python
    env:
      inputs_output_path: ${{inputs.output-path}}
      inputs_build_artifacts: ${{steps.locate-build-artifacts.outputs.files}}
    run: |
      ## actions/unity/build/action.yml#check-build-results
      import os, sys, re, json
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WORKSPACE", "."))

      inputs_output_path = str(os.getenv("inputs_output_path"))
      assert inputs_output_path is not None
      print("inputs_output_path:", inputs_output_path, flush=True)

      inputs_build_artifacts = str(os.getenv("inputs_build_artifacts", ""))
      assert inputs_build_artifacts is not None

      output_path = Path(inputs_output_path).absolute()
      print("output_path:", output_path, flush=True)
      assert output_path is not None
      assert output_path.exists()

      build_artifacts = inputs_build_artifacts.split()
      assert build_artifacts is not None
      for f in build_artifacts:
          p = Path(f)
          assert p.exists()

  - id: cache-artifacts
    if: ${{ fromJSON(inputs.cache-artifacts) }}
    name: Cache artifacts
    uses: actions/cache/save@v4
    with:
      path: ${{steps.check-inputs.outputs.output_dir}}
      key: ${{ inputs.cache-name }}
