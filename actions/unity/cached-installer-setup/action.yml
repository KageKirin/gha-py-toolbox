name: UNITY cached installer-based setup
description: >-
  Downloads and installs Unity at the given version/changeset and for the given platform
  using the official installer.
  Results are cached for faster workflows.

  **WARNING: only Linux supported for now**

inputs:
  version:
    description: >-
      Unity version to install.
      Refer to https://unity.com/releases/editor/archive for the correct version.
    required: true
    default: 2021.3.21f1
  changeset:
    description: >-
      Unity changeset to install.
      Refer to https://unity.com/releases/editor/archive for the correct changeset.
      
      NOTE: The changeset is part of the actual download URL, i.e. https://download.unity3d.com/download_unity/{changeset}
      e.g.: https://download.unity3d.com/download_unity/1b156197d683/LinuxEditorInstaller/Unity-2021.3.21f1.tar.xz
    required: true
    default: 1b156197d683
  components:
    description: >-
      List of Unity components to install.
      
      Multiline, use whitespace/newline to separate items.
    required: true
    default: |
      Unity
      Linux-IL2CPP
      Linux-Server
      WebGL
  unity-path:
    description: path where to install Unity to
    required: true
    default: .unity
  unity-temp:
    description: temp path where to download Unity installers to
    required: true
    default: .unitysetup


outputs:
  unity-path:
    description: full path to where Unity has been installed.
    value: ${{ steps.run-installer.outputs.path }}


runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: installer-url
    name: Generate installer URL for Unity ${{ inputs.version }} and ${{ inputs.changelog }}
    shell: python
    env:
      unity_version: ${{ inputs.version }}
      unity_changelog: ${{ inputs.changelog }}
      unity_baseurl: https://download.unity3d.com/download_unity/
    run: |
      import os, sys
      from urllib.parse import urlsplit, urlunsplit

      unity_version = str(os.getenv("unity_version"))
      unity_changelog = str(os.getenv("unity_changelog"))
      unity_baseurl = str(os.getenv("unity_baseurl"))

      parts = urlsplit(unity_baseurl)
      parts += [unity_changelog, f"UnitySetup-{unity_changelog}"]

      installer_url = urlunsplit(parts)
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"url={installer_url}")
          print(f"url={installer_url}", file=fh)

  - id: download-installer
    name: Download installer from ${{ steps.installer-url.outputs.url }}
    shell: python
    env:
      installer_url: ${{ steps.installer-url.outputs.url }}
      unity_temp: ${{ inputs.unity-temp }}
    run: |
      import os, sys, requests
      from pathlib import Path
      from urllib.parse import urlparse

      unity_temp = Path(os.getenv("unity_temp"))
      unity_temp.mkdir(parents=True, exist_ok=True)

      installer_url = urlparse(os.getenv("installer_url"))
      installer_path = Path.joinpath(unity_temp, Path(installer_url.geturl()).name)

      with requests.get(installer_url.geturl(), stream=True) as r:
        installer_path.write_bytes(r.raw)
        installer_path.chmod(0o666)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"path={installer_path}")
          print(f"path={installer_path}", file=fh)

  # TODO: cache installer
  - id: run-installer
    name: Download installer from ${{ steps.installer-url.outputs.url }}
    shell: python
    env:
      installer_path: ${{ steps.download-installer.outputs.path }}
      unity_path: ${{ inputs.unity-path }}
      unity_components: ${{ inputs.components }}
    run: |
      import os, sys, requests, subprocess
      from pathlib import Path

      installer_path = Path(os.getenv("installer_path"))
      unity_path = Path(os.getenv("unity_path"))
      unity_components = list(str(os.getenv("unity_components")).split())

      assert installer_path.exists()
      subprocess.check_call([installer_path, '--help'])
      subprocess.check_call([installer_path, '----unattended', '--list-components'])
      subprocess.check_call([installer_path, '----unattended', f'--install-location={unity_path}', f'--components={",".join(unity_components)}'])


  # TODO: cache installation
