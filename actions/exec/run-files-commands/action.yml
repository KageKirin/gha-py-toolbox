name: EXEC run files commands
description: >
  Runs the given commands for each encountered file.

inputs:
  path:
    description: path from where to run the commands
    required: false
    default: ${{github.workspace}}

  # Parameters
  files:
    description: >
      Glob pattern(s) for files to update
      Whitespace-separated values.
    required: true
  commands:
    description: >
      Command pattern to run for each file can contain `{{{filename}}}`
      Newline-separated values.
    required: true

  ignore-errors:
    description: >
      Whether to ignore occurring errors, i.e. failing commands.
      If false, this will raise an exception (assert) terminating the action.
    required: true
    default: 'true'

  dry-run:
    description: >
      Whether to actually execute the commands for each file.
    required: true
    default: 'true'

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        pystache

  - id: run-commands
    name: Run commands
    shell: python
    env:
      inputs_path: ${{ inputs.path }}
      inputs_files: ${{ inputs.files }}
      inputs_commands: ${{ inputs.commands }}
      inputs_ignore_errors: ${{ inputs.ignore-errors }}
      inputs_dry_run: ${{ inputs.dry-run }}
    run: |
      ## actions/exec/run-files-commands/action.yml#run-commands
      import os, sys
      import pystache
      from pathlib import Path
      from contextlib import chdir

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      path = Path(os.getenv("inputs_path", "."))
      assert path is not None

      ignore_errors = str(os.getenv("inputs_ignore_errors", "false")) == "true"
      dry_run = not str(os.getenv("inputs_dry_run", "true")) == "false"

      glob_files = list(str(os.getenv("inputs_files", "*.*")).split())
      assert glob_files is not None
      assert len(glob_files) > 0

      inputs_commands = list(
          str(os.getenv("inputs_commands", "ls {{filename}}")).split("\n")
      )
      assert inputs_commands is not None
      assert len(inputs_commands) > 0

      commands = [pystache.parse(c) for c in inputs_commands]
      renderer = pystache.Renderer()

      with chdir(path):
          for pattern in glob_files:
              for file in [f for f in Path(".").glob(pattern) if f.is_file()]:
                  print(file)
                  for command in commands:
                      cmd = renderer.render(command, {"filename": str(file)})
                      print(cmd, flush=True)
                      if not dry_run:
                          err = os.waitstatus_to_exitcode(os.system(cmd))
                          if not ignore_errors:
                              assert err == 0
