name: GH GraphQL update pull requests
description: >
  Updates provided pull requests up to provided count.
  NOTE: update using rebase to avoid branch merges into feature branches.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  graphql-url:
    description: >
      GitHub (Enterprise) instance GRAPHQL API URL (including protocol).
    required: false
    default: ${{github.graphql_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}
  pullrequests:
    description: >
      Whitespace-separated list of pull request IDs
      WARNING: the ID is not the PR number
    required: true
  pull-request-branch-update-method:
    description: >
      The possible methods for updating a pull request's head branch with the base branch.
      MERGE: Update branch via merge. (Creates a merge commit, not recommended).
      REBASE: Update branch via rebase. (Updates branch to top of base, recommended).
    type: choice
    options:
    - MERGE
    - REBASE
    required: true
    default: REBASE


outputs:
  ids:
    description: >
      The IDs identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.ids}}
  prs:
    description: >
      The PR numbers identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.prs}}
  branches:
    description: >
      The branches identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.branches}}
  pullrequests:
    description: >
      JSON representation of the pull requests
    value: ${{ fromJSON(steps.get-pullrequests.outputs.pullrequests) }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub

  - id: get-pullrequests
    name: Build
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_api_url: ${{inputs.api-url}}
      inputs_graphql_url: ${{inputs.graphql-url}}
      inputs_token: ${{inputs.token}}
      inputs_base_ref: ${{inputs.base-ref}}
      inputs_update_method: ${{inputs.pull-request-branch-update-method}}
    run: |
      import os, sys, re, json, pprint, itertools, requests, uuid
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet

      token = str(os.getenv("inputs_token"))
      if not token:
          token = str(os.getenv("GITHUB_TOKEN"))

      session = requests.Session()
      if token and token != "":
          session.headers["Authorization"] = f"Bearer {token}"

      api_url = str(os.getenv("inputs_api_url"))
      graphql_url = str(os.getenv("inputs_graphql_url"))
      assert graphql_url
      assert urlparse(graphql_url)

      repository = str(os.getenv("inputs_repository"))
      pullrequests = str(os.getenv("inputs_pullrequests")).split()
      udpate_method = str(os.getenv("inputs_update_method"))

      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)


      for pr_id in pullrequests:
        pr = repo.get_pull(number=pr_id)
        mutation_id = str(uuid.uuid4())

        # pr.head.sha

        mutation = f"""
      mutation {
        updatePullRequestBranch(input: {
          clientMutationId: {mutation_id},
          expectedHeadOid: {pr.head.ref},
          pullRequestId: {pr_id},
          updateMethod: {udpate_method},
        })
        {
          clientMutationId,
          pullRequest
          {
            id,
            number,
            title,
            baseRef,
            baseRefName,
            baseRefOid,
            headRef,
            headRefName,
            headRefOid,
            mergeable,
          }
        }
      }
        """

        print(mutation)

        response = session.post(url=graphql_url, json={"query": mutation})
        print("response status code: ", response.status_code) 
        if response.status_code == 200: 
            print("response : ", response.content) 

      #with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
      #    print(f"ids={' '.join(ids)}")
      #    print(f"ids={' '.join(ids)}", file=fh)
      #    print(f"prs={' '.join(prs)}")
      #    print(f"prs={' '.join(prs)}", file=fh)
      #    print(f"branches={' '.join(branches)}")
      #    print(f"branches={' '.join(branches)}", file=fh)
      #    print(f"pullrequests={pullrequests_json_escaped}")
      #    print(f"pullrequests={pullrequests_json_escaped}", file=fh)
