name: GH GRAPHQL get pull requests
description: >
  Retrieves all OPEN pull requests matching a provided filter.
  NOTE: closed pull requests are not retrieved.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  graphql-url:
    description: >
      GitHub (Enterprise) instance GRAPHQL API URL (including protocol).
    required: false
    default: ${{github.graphql_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}

  filter-title:
    description: >
      Filter regular expression applied on the pull requests title.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-author:
    description: >
      Filter regular expression applied on the pull requests author/submitter.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-assignee:
    description: >
      Filter regular expression applied on the pull requests assignee.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-branch:
    description: >
      Filter regular expression applied on the pull requests branch.
      Empty (default) means no filter.
    required: false
    default: ''


outputs:
  ids:
    description: >
      The IDs identifying the pull requests as space-separated list.
    value: ${{steps.filter-pullrequests.outputs.ids}}
  numbers:
    description: >
      The PR numbers identifying the pull requests as space-separated list.
    value: ${{steps.filter-pullrequests.outputs.numbers}}
  branches:
    description: >
      The branches identifying the pull requests as space-separated list.
    value: ${{steps.filter-pullrequests.outputs.branches}}
  pullrequests:
    description: >
      JSON representation of the pull requests
    value: ${{ fromJSON(steps.filter-pullrequests.outputs.pullrequests) }}

runs:
  using: composite
  steps:
  - id: prepare-inputs
    # TODO: make this a separate action
    env:
      inputs_repository: ${{inputs.repository}}
    shell: python
    run: |
      import os

      repository = str(os.getenv("inputs_repository"))
      (owner, repo) = repository.split("/")

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"owner={owner}")
          print(f"owner={owner}", file=fh)
          print(f"repo={repo}")
          print(f"repo={repo}", file=fh)

  - id: query
    uses: kagekirin/gha-py-toolbox/actions/ghgql/query@main
    with:
      token: ${{inputs.token}}
      graphql-query: |
        query($owner: String!, $repo: String!, $count: Int!) {
          repository(owner: $owner, name: $repo)
          {
            id,
            name,
            url,
            allowUpdateBranch,
            autoMergeAllowed,
            pullRequests(
              orderBy: {
                direction : ASC,
                field : CREATED_AT,
              },
              first: $count,
              states: OPEN,
            )
            {
              nodes
              {
                baseRefOid,
                baseRefName,
                headRefOid,
                headRefName,
                id,
                number,
                title,
                bodyText,
                permalink,
                resourcePath,
                state,
                mergeable,
                url,
                autoMergeRequest,
                author{login},
                assignees{login},
              }
            }
          }
        }
      graphql-variables: |
        {
          "owner": "${{github.repository_owner}}",
          "repo":  "${{steps.prepare-inputs.outputs.repo}}",
          "count": 100
        }
  - id: filter-pullrequests
    name: Build
    shell: python
    env:
      inputs_pullrequests: ${{toJSON(steps.query.outputs.json)}}
      inputs_filter_title: ${{inputs.filter-title}}
      inputs_filter_author: ${{inputs.filter-author}}
      inputs_filter_assignee: ${{inputs.filter-assignee}}
      inputs_filter_branch: ${{inputs.filter-branch}}
    run: |
      import os, sys, re, json, pprint

      inputs_pullrequests = str(os.getenv("inputs_pullrequests"))
      print("inputs_pullrequests", inputs_pullrequests)
      pulls_json = json.loads(json.loads(inputs_pullrequests))

      filter_title = str(os.getenv("inputs_filter_title"))
      filter_author = str(os.getenv("inputs_filter_author"))
      filter_assignee = str(os.getenv("inputs_filter_assignee"))
      filter_branch = str(os.getenv("inputs_filter_branch"))

      pprint.pp(pulls_json)

      pulls = pulls_json["data"]["repository"]["pullRequests"]["nodes"]
      pprint.pp(pulls)

      pprint.pp([(pr["id"], pr["number"], pr["title"]) for pr in pulls])

      filtered_pulls = [pr for pr in pulls]
      if filter_title and len(filter_title) > 0:
          rx = re.compile(filter_title)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr["title"]), filtered_pulls)
          )

      if filter_author and len(filter_author) > 0:
          rx = re.compile(filter_author)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr["user"].login), filtered_pulls)
          )

      if filter_branch and len(filter_branch) > 0:
          rx = re.compile(filter_branch)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr["headRefName"]), filtered_pulls)
          )

      pprint.pp(filtered_pulls)
      pprint.pp([(pr["id"], pr["number"], pr["title"]) for pr in filtered_pulls])

      ids = [pr["id"] for pr in filtered_pulls]
      pprint.pp(ids)
      numbers = [str(pr["number"]) for pr in filtered_pulls]
      pprint.pp(numbers)
      branches = [pr["headRefName"] for pr in filtered_pulls]

      pullrequests_json = json.dumps(filtered_pulls)
      pullrequests_json_escaped = json.dumps(pullrequests_json)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"ids={' '.join(ids)}")
          print(f"ids={' '.join(ids)}", file=fh)
          print(f"numbers={' '.join(numbers)}")
          print(f"numbers={' '.join(numbers)}", file=fh)
          print(f"branches={' '.join(branches)}")
          print(f"branches={' '.join(branches)}", file=fh)
          print(f"pullrequests={pullrequests_json_escaped}")
          print(f"pullrequests={pullrequests_json_escaped}", file=fh)
