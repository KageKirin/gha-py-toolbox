name: GH GRAPHQL get pull requests
description: >
  Retrieves all OPEN pull requests matching a provided filter.
  NOTE: closed pull requests are not retrieved.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  graphql-url:
    description: >
      GitHub (Enterprise) instance GRAPHQL API URL (including protocol).
    required: false
    default: ${{github.graphql_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}

  filter-title:
    description: >
      Filter regular expressions applied on the pull requests title.
      Whitespace-separated values.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-author:
    description: >
      Filter regular expressions applied on the pull requests author/submitter.
      Whitespace-separated values.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-assignee:
    description: >
      Filter regular expressions applied on the pull requests assignee.
      Whitespace-separated values.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-branch:
    description: >
      Filter regular expressions applied on the pull requests branch.
      Whitespace-separated values.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-labels:
    description: >
      Filter regular expressions applied on the pull requests labels.
      Whitespace-separated values.
      Empty (default) means no filter.
    required: false
    default: ''


outputs:
  ids:
    description: >
      The IDs identifying the pull requests as whitespace-separated list.
    value: ${{steps.get-pullrequests.outputs.ids}}
  numbers:
    description: >
      The PR numbers identifying the pull requests as whitespace-separated list.
    value: ${{steps.get-pullrequests.outputs.numbers}}
  branches:
    description: >
      The branches identifying the pull requests as whitespace-separated list.
    value: ${{steps.get-pullrequests.outputs.branches}}
  shas:
    description: >
      The respective Oids of each branch as whitespace-separated list.
    value: ${{steps.get-pullrequests.outputs.shas}}
  base-branches:
    description: >
      The respective base branches as whitespace-separated list (aka base refs).
    value: ${{steps.get-pullrequests.outputs.base_branches}}
  base-shas:
    description: >
      The respective base branch Oids as whitespace-separated list (aka base refs).
    value: ${{steps.get-pullrequests.outputs.base_shas}}
  pullrequests:
    description: >
      JSON representation of the pull requests
    value: ${{fromJSON(steps.get-pullrequests.outputs.pullrequests)}}
  count:
    description: >
      Number of retrieved pull requests
    value: ${{steps.get-pullrequests.outputs.count}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        git+https://github.com/KageKirin/gha-py-toolbox.git@main#subdirectory=pylib/tuniq

  - id: prepare-inputs
    # TODO: make this a separate action
    env:
      inputs_repository: ${{inputs.repository}}
    shell: python
    run: |
      ## actions/ghgql/get-pullrequests/action.yml#prepare-inputs
      import os

      repository = str(os.getenv("inputs_repository"))
      (owner, repo) = repository.split("/")

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"owner={owner}")
          print(f"owner={owner}", file=fh)
          print(f"repo={repo}")
          print(f"repo={repo}", file=fh)

  - id: query
    uses: kagekirin/gha-py-toolbox/actions/ghgql/query@main
    with:
      token: ${{inputs.token}}
      graphql-query: |
        query($owner: String!, $repo: String!, $count: Int!) {
          repository(owner: $owner, name: $repo)
          {
            id,
            name,
            url,
            allowUpdateBranch,
            autoMergeAllowed,
            pullRequests(
              orderBy: {
                direction : ASC,
                field : CREATED_AT,
              },
              first: $count,
              states: OPEN,
            )
            {
              nodes
              {
                baseRefOid
                baseRefName
                headRefOid
                headRefName
                baseRef
                {
                  id
                  name
                  prefix
                  target
                  {
                    id
                    oid
                  }
                }
                headRef
                {
                  id
                  name
                  prefix
                  target
                  {
                    id
                    oid
                  }
                }
                id
                number
                title
                bodyText
                permalink
                resourcePath
                state
                mergeable
                merged
                url
                isDraft
                isInMergeQueue
                mergeStateStatus
                mergeQueueEntry
                {
                  id
                  enqueuedAt
                  enqueuer {login}
                  position
                }
                mergeQueue {id}
                autoMergeRequest
                {
                  authorEmail
                  commitHeadline
                  commitBody
                  enabledAt
                  enabledBy{login}
                  mergeMethod
                }
                author{login}
                assignees(first: 10)
                {
                  nodes
                  {
                    login
                  }
                }
                labels(first: 100)
                {
                  nodes
                  {
                    id
                    name
                    color
                    description
                    url
                  }
                }
              }
            }
          }
        }
      graphql-variables: |
        {
          "owner": "${{github.repository_owner}}",
          "repo":  "${{steps.prepare-inputs.outputs.repo}}",
          "count": 100
        }

  - id: get-pullrequests
    name: Get pull requests
    shell: python
    env:
      inputs_pullrequests: ${{toJSON(steps.query.outputs.json)}}
      inputs_filter_title: ${{inputs.filter-title}}
      inputs_filter_author: ${{inputs.filter-author}}
      inputs_filter_assignee: ${{inputs.filter-assignee}}
      inputs_filter_branch: ${{inputs.filter-branch}}
      inputs_filter_labels: ${{inputs.filter-labels}}
    run: |
      ## actions/ghgql/get-pullrequests/action.yml#get-pullrequests
      import os, sys, re, json, pprint
      import tuniq

      inputs_pullrequests = str(os.getenv("inputs_pullrequests"))
      print("inputs_pullrequests", inputs_pullrequests)
      pulls_json = json.loads(json.loads(inputs_pullrequests))

      filter_titles = tuniq.unique(str(os.getenv("inputs_filter_title", "")).split())
      filter_authors = tuniq.unique(
          str(os.getenv("inputs_filter_author", "")).split()
      )
      filter_assignees = tuniq.unique(
          str(os.getenv("inputs_filter_assignee", "")).split()
      )
      filter_branches = tuniq.unique(
          str(os.getenv("inputs_filter_branch", "")).split()
      )
      filter_labels = tuniq.unique(str(os.getenv("inputs_filter_labels", "")).split())

      pprint.pp(pulls_json)

      pulls = pulls_json["data"]["repository"]["pullRequests"]["nodes"]
      pprint.pp(pulls)

      pprint.pp([(pr["id"], pr["number"], pr["title"]) for pr in pulls])

      filtered_pulls = [pr for pr in pulls]

      if filter_titles and len(filter_titles):
          subfiltered_pulls = []
          for filter_title in [f for f in filter_titles if len(f) > 0]:
              rx = re.compile(filter_title)
              subfiltered_pulls.extend(
                  [pr for pr in filtered_pulls if rx.search(pr["title"])]
              )
          filtered_pulls = tuniq.unique(subfiltered_pulls)

      if filter_authors and len(filter_authors):
          subfiltered_pulls = []
          for filter_author in [f for f in filter_authors if len(f) > 0]:
              rx = re.compile(filter_author)
              subfiltered_pulls.extend(
                  [pr for pr in filtered_pulls if rx.search(pr["user"].login)]
              )
          filtered_pulls = tuniq.unique(subfiltered_pulls)

      if filter_assignees and len(filter_assignees):
          subfiltered_pulls = []
          for filter_assignee in [f for f in filter_assignees if len(f) > 0]:
              rx = re.compile(filter_assignee)
              subfiltered_pulls.extend(
                  [
                      pr
                      for pr in filtered_pulls
                      if len(
                          [ass for ass in pr["assigness"] if rx.search(ass["login"])]
                      )
                      > 0
                  ]
              )
          filtered_pulls = tuniq.unique(subfiltered_pulls)

      if filter_branches and len(filter_branches):
          subfiltered_pulls = []
          for filter_branch in [f for f in filter_branches if len(f) > 0]:
              rx = re.compile(filter_branch)
              subfiltered_pulls.extend(
                  [pr for pr in filtered_pulls if rx.search(pr["headRefName"])]
              )
          filtered_pulls = tuniq.unique(subfiltered_pulls)

      if filter_labels and len(filter_labels):
          subfiltered_pulls = []
          for filter_label in [f for f in filter_labels if len(f) > 0]:
              rx = re.compile(filter_label)
              print(rx)
              subfiltered_pulls.extend(
                  [
                      pr
                      for pr in filtered_pulls
                      if len(
                          [l for l in pr["labels"]["nodes"] if rx.match(l["name"])]
                      )
                      > 0
                  ]
              )
          filtered_pulls = tuniq.unique(subfiltered_pulls)

      print("filtered_pulls (full):", filtered_pulls)
      print(
          "filtered_pulls (data subset):",
          [(pr["id"], pr["number"], pr["title"]) for pr in filtered_pulls],
      )

      ids = [pr["id"] for pr in filtered_pulls]
      print("ids:", ids)

      numbers = [str(pr["number"]) for pr in filtered_pulls]
      print("numbers:", numbers)

      branches = [pr["headRefName"] for pr in filtered_pulls]
      print("branches:", branches)

      shas = [pr["headRefOid"] for pr in filtered_pulls]
      print("shas:", shas)

      base_branches = [pr["baseRefName"] for pr in filtered_pulls]
      print("base_branches:", base_branches)

      base_shas = [pr["baseRefOid"] for pr in filtered_pulls]
      print("base_shas:", base_shas)

      pullrequests_json_escaped = json.dumps(
          json.dumps([pr for pr in filtered_pulls])
      )

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"ids={' '.join(ids)}")
          print(f"ids={' '.join(ids)}", file=fh)
          print(f"numbers={' '.join(numbers)}")
          print(f"numbers={' '.join(numbers)}", file=fh)
          print(f"branches={' '.join(branches)}")
          print(f"branches={' '.join(branches)}", file=fh)
          print(f"shas={' '.join(shas)}")
          print(f"shas={' '.join(shas)}", file=fh)
          print(f"base_branches={' '.join(base_branches)}")
          print(f"base_branches={' '.join(base_branches)}", file=fh)
          print(f"base_shas={' '.join(base_shas)}")
          print(f"base_shas={' '.join(base_shas)}", file=fh)
          print(f"pullrequests={pullrequests_json_escaped}")
          print(f"pullrequests={pullrequests_json_escaped}", file=fh)
          print(f"count={len(ids)}")
          print(f"count={len(ids)}", file=fh)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      ## actions/ghgql/get-pullrequests/action.yml#verify-outputs
      steps.get-pullrequests.outputs.ids
      ${{steps.get-pullrequests.outputs.ids}}

      steps.get-pullrequests.outputs.numbers
      ${{steps.get-pullrequests.outputs.numbers}}

      steps.get-pullrequests.outputs.branches
      ${{steps.get-pullrequests.outputs.branches}}

      steps.get-pullrequests.outputs.shas
      ${{steps.get-pullrequests.outputs.shas}}

      steps.get-pullrequests.outputs.base_branches
      ${{steps.get-pullrequests.outputs.base_branches}}

      steps.get-pullrequests.outputs.base_shas
      ${{steps.get-pullrequests.outputs.base_shas}}

      steps.get-pullrequests.outputs.count
      ${{steps.get-pullrequests.outputs.count}}

      steps.get-pullrequests.outputs.pullrequests
      ${{steps.get-pullrequests.outputs.pullrequests}}
      ${{fromJSON(steps.get-pullrequests.outputs.pullrequests)}}
