name: GH GRAPHQL get next pull request merge candidate
description: >
  Retrieves the next PR that ought to be merged.
  Returns the PR number and info about mergeability.
  CAVEAT: outputs MUST still require on more check (GHA Yaml if:) before proceeding with merge.


inputs:
  pullrequests: # ${{ steps.get-pull-requests.outputs.pullrequests }}
    description: JSON array retrieved from ghgql/get-pullrequests
    required: true
  base-branches: # ${{ steps.get-base-branches.outputs.branches }}
    description: JSON dict retrieved from ghgql/get-branches
    required: true

  automerge-label:
    description: regular expression to match the PR label for automerge flag
    required: true
    default: automerge
  ordered-label:
    description: regular expression to match the PR label for ordered flag
    required: true
    default: ordered
  priority-label:
    description: regular expression to match the PR label for priority flag
    required: true
    default: priority


outputs:
  pullrequest:
    description: Candidate PR JSON data
    value: ${{ fromJSON(steps.get-next-pr.outputs.pullrequest) }}
  number:
    description: Candidate PR number
    value: ${{ steps.get-next-pr.outputs.number }}
  branch:
    description: Candidate PR branch
    value: ${{ steps.get-next-pr.outputs.number }}
  is-latest-base:
    description: >
      Whether the candidate PR is up to the latest base_branches.
      Requires update if not.
    value: ${{ steps.get-next-pr.outputs.is_latest_base }}
  state:
    description: Candidate PR state
    value: ${{ steps.get-next-pr.outputs.state }}
  draft:
    description: Whether the candidate PR is a draft. (Should be false)
    value: ${{ steps.get-next-pr.outputs.draft }}
  merged:
    description: Whether the candidate PR is merged. (Should be false)
    value: ${{ steps.get-next-pr.outputs.merged }}
  auto_merge:
    description: Candidate PR auto merge enabled
    value: ${{ steps.get-next-pr.outputs.auto_merge }}
  mergeable:
    description: Whether the candidate PR is mergeable
    value: ${{ steps.get-next-pr.outputs.mergeable }}
  mergeable-state:
    description: Whether the candidate PR is mergeable
    value: ${{ steps.get-next-pr.outputs.mergeable_state }}
  can-automerge:
    description: Candidate PR can automerge
    value: ${{ steps.get-next-pr.outputs.can_automerge }}


runs:
  using: composite
  steps:
  - id: get-next-pr
    name: Get branch
    shell: python
    env:
      inputs_pullrequests: ${{ inputs.pullrequests }}
      inputs_base_branches: ${{ inputs.base-branches }}
      inputs_automerge_label: ${{ inputs.automerge-label }} #regex
      inputs_ordered_label: ${{ inputs.ordered-label }} #regex
      inputs_priority_label: ${{ inputs.priority-label }} #regex
    run: |
      import os, sys, re, json, pprint, itertools


      def pr_has_label(pr: dict, label: re.Pattern) -> bool:
          return any(
              filter(lambda l: label.match(l["name"]) is not None, pr["labels"])
          )


      def pr_sort_by_number(pr: dict) -> int:
          return pr["number"]


      inputs_pullrequests = str(os.getenv("inputs_pullrequests", "[]"))
      assert inputs_pullrequests is not None

      inputs_base_branches = str(os.getenv("inputs_pullrequests", "{}"))
      assert inputs_base_branches is not None

      inputs_automerge_label = str(os.getenv("inputs_automerge_label", "automerge"))
      assert inputs_automerge_label is not None
      automerge_label = re.compile(inputs_automerge_label)
      assert automerge_label is not None

      inputs_ordered_label = str(os.getenv("inputs_ordered_label", "ordered"))
      assert inputs_ordered_label is not None
      ordered_label = re.compile(inputs_ordered_label)
      assert ordered_label is not None

      inputs_priority_label = str(os.getenv("inputs_priority_label", "priority"))
      assert inputs_priority_label is not None
      priority_label = re.compile(inputs_priority_label)
      assert priority_label is not None


      pullrequests = json.loads(inputs_pullrequests)
      assert pullrequests is not None
      pprint.pp(pullrequests)

      base_branches = json.loads(inputs_base_branches)
      assert base_branches is not None
      pprint.pp(base_branches)

      ## check base branch data is available
      for pr in pullrequests:
          assert pr["baseRefName"] is not None
          assert pr["baseRefName"] in base_branches.keys()

      ## check all prs are labeled as automerge
      for pr in pullrequests:
          assert pr_has_label(pr, automerge_label)

      ## add .is_latest_base .can_automerge field to prs
      for pr in pullrequests:
          pr["is_latest_base"] = (
              pr["baseRefOid"] == base_branches[pr["baseRefName"]]["target"]["oid"]
          )
          pr["can_automerge"] = (
              pr["state"] == "open"
              and pr["draft"] is False
              and pr["merged"] is False
              # and pr["auto_merge"]: is not None
              and pr["mergeable"] is True
              and pr["mergeable_state"] == "clean"
          )

      mergeable_pr = None

      ordered_prs = sorted(
          [pr for pr in pullrequests if pr_has_label(pr, ordered_label)],
          key=pr_sort_by_number,
      )

      ordered_priority_prs = sorted(
          [pr for pr in ordered_prs if pr_has_label(pr, priority_label)],
          key=pr_sort_by_number,
      )

      priority_prs = sorted(
          [pr for pr in pullrequests if pr_has_label(pr, priority_label)],
          key=pr_sort_by_number,
      )

      regular_prs = set(pullrequests) - set(ordered_prs) - set(priority_prs)

      if mergeable_pr is None and len(ordered_priority_prs):
          mergeable_pr = ordered_priority_prs[0]


      if mergeable_pr is None and len(priority_prs):
          mergeable_pr = next(
              (
                  pr
                  for pr in priority_prs
                  if pr["can_automerge"] and pr["is_latest_base"]
              ),
              None,
          )
          if mergeable_pr is None:
              mergeable_pr = next(
                  (pr for pr in priority_prs if pr["can_automerge"]), None
              )


      if mergeable_pr is None and len(ordered_prs):
          mergeable_pr = ordered_prs[0]


      if mergeable_pr is None and len(regular_prs):
          mergeable_pr = next(
              (
                  pr
                  for pr in regular_prs
                  if pr["can_automerge"] and pr["is_latest_base"]
              ),
              None,
          )
          if mergeable_pr is None:
              mergeable_pr = next(
                  (pr for pr in priority_prs if pr["can_automerge"]), None
              )

      pr = mergeable_pr
      pr_json_encoded = json.dumps(json.dumps(pr)) if pr is not None else '"{}"'
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"pullrequest={pr_json_encoded}")
          print(f"pullrequest={pr_json_encoded}", file=fh)
          print(f"number={pr["number"] if pr is not None else -1}")
          print(f"number={pr["number"] if pr is not None else -1}", file=fh)
          print(
              f"is_latest_base={pr["is_latest_base"] if pr is not None else False}".lower()
          )
          print(
              f"is_latest_base={pr["is_latest_base"] if pr is not None else False}",
              file=fh,
          )
          print(f"state={pr["state"] if pr is not None else "error"}".lower())
          print(
              f"state={pr["state"] if pr is not None else "error"}".lower(), file=fh
          )
          print(f"draft={pr["draft"] if pr is not None else True}".lower())
          print(f"draft={pr["draft"] if pr is not None else True}".lower(), file=fh)
          print(f"merged={pr["merged"] if pr is not None else False}".lower())
          print(
              f"merged={pr["merged"] if pr is not None else False}".lower(), file=fh
          )
          print(
              f"auto_merge={pr["auto_merge"] if pr is not None else 'null'}".lower()
          )
          print(
              f"auto_merge={pr["auto_merge"] if pr is not None else 'null'}".lower(),
              file=fh,
          )
          print(f"mergeable={pr["mergeable"] if pr is not None else False}".lower())
          print(
              f"mergeable={pr["mergeable"] if pr is not None else False}".lower(),
              file=fh,
          )
          print(
              f"mergeable_state={pr["mergeable_state"] if pr is not None else False}".lower()
          )
          print(
              f"mergeable_state={pr["mergeable_state"] if pr is not None else False}".lower(),
              file=fh,
          )
          print(
              f"can_automerge={pr["can_automerge"] if pr is not None else False}".lower()
          )
          print(
              f"can_automerge={pr["can_automerge"] if pr is not None else False}".lower(),
              file=fh,
          )
