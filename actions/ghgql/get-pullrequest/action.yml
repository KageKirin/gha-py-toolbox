name: GH GRAPHQL get pull request
description: >
  Retrieves the current pull request via GraphQL.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  graphql-url:
    description: >
      GitHub (Enterprise) instance GRAPHQL API URL (including protocol).
    required: false
    default: ${{github.graphql_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}
  branch-ref:
    description: >
      The full reference of the branch to get the pull request for.
      The value will be truncated internally to only contain the part after `refs/heads/`.
    required: true
    default: ${{github.ref}}


outputs:
  id:
    description: >
      The GraphQL node ID identifying the pull request.
    value: ${{steps.get-pullrequest.outputs.id}}
  number:
    description: >
      The PR number identifying the pull request.
    value: ${{steps.get-pullrequest.outputs.number}}
  branch:
    description: >
      The branch identifying the pull request.
    value: ${{steps.get-pullrequest.outputs.branch}}
  pullrequest:
    description: >
      JSON representation of the pull request.
    value: ${{ fromJSON(steps.get-pullrequest.outputs.pullrequest) }}

runs:
  using: composite
  steps:
  - id: prepare-inputs
    # TODO: make this a separate action
    env:
      inputs_repository: ${{inputs.repository}}
    shell: python
    run: |
      import os

      repository = str(os.getenv("inputs_repository"))
      (owner, repo) = repository.split("/")

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"owner={owner}")
          print(f"owner={owner}", file=fh)
          print(f"repo={repo}")
          print(f"repo={repo}", file=fh)
  - id: get-branch-ref-name
    env:
      branch_ref: ${{inputs.branch-ref}}
    shell: python
    run: |
      import os

      branch_ref = str(os.getenv("branch_ref"))
      branch_ref_name = branch_ref.replace("refs/heads/", "")

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"ref_name={branch_ref_name}")
          print(f"ref_name={branch_ref_name}", file=fh)

  - id: query
    uses: kagekirin/gha-py-toolbox/actions/ghgql/query@main
    with:
      token: ${{inputs.token}}
      graphql-query: |
        query($owner: String!, $repo: String!, $branch: String!) {
          repository(owner: $owner, name: $repo)
          {
            id,
            name,
            url,
            allowUpdateBranch,
            autoMergeAllowed,
            pullRequests(headRefName: $branch,
              orderBy: {
                direction : DESC,
                field : UPDATED_AT
              },
              states: OPEN,
              first : 1,
            )
            {
              nodes
              {
                baseRefOid
                baseRefName
                headRefOid
                headRefName
                id
                number
                title
                bodyText
                permalink
                resourcePath
                state
                mergeable
                url
                autoMergeRequest
                {
                  authorEmail
                  commitHeadline
                  commitBody
                  enabledAt
                  enabledBy{login}
                  mergeMethod
                }
                author{login}
              }
            }
          }
        }
      graphql-variables: |
        {
          "owner":  "${{github.repository_owner}}",
          "repo":   "${{steps.prepare-inputs.outputs.repo}}",
          "branch": "${{steps.get-branch-ref-name.outputs.ref_name}}"
        }
  - id: get-pullrequest
    name: Build
    shell: python
    env:
      inputs_pullrequest: ${{toJSON(steps.query.outputs.json)}}
    run: |
      import os, sys, re, json, pprint

      inputs_pullrequest = str(os.getenv("inputs_pullrequest"))
      print("inputs_pullrequest", inputs_pullrequest)
      pulls_json = json.loads(json.loads(inputs_pullrequest))

      filter_title = str(os.getenv("inputs_filter_title"))
      filter_author = str(os.getenv("inputs_filter_author"))
      filter_assignee = str(os.getenv("inputs_filter_assignee"))
      filter_branch = str(os.getenv("inputs_filter_branch"))

      pprint.pp(pulls_json)

      pull = pulls_json["data"]["repository"]["pullRequests"]["nodes"][0]
      pprint.pp(pull)

      pullrequest_json = json.dumps(pull)
      pullrequest_json_escaped = json.dumps(pullrequest_json)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"id={pull['id']}")
          print(f"id={pull['id']}", file=fh)
          print(f"number={pull['number']}")
          print(f"number={pull['number']}", file=fh)
          print(f"branch={pull['headRefName']}")
          print(f"branch={pull['headRefName']}", file=fh)
          print(f"pullrequest={pullrequest_json_escaped}")
          print(f"pullrequest={pullrequest_json_escaped}", file=fh)
