name: YAML set value
description: >-
  Retrieves the value for a given YAMLpath.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  yaml-file:
    description: relative path to YAML file to parse
    required: false
  yaml-text:
    description: alternative YAML text to parse
    required: false
  yaml-path:
    description: YAML path expression to set value for.
    required: true
  yaml-value:
    description: YAML value to update. Can be object, but must be escaped as string.
    required: true

outputs:
  value:
    description: the retrieved and updated value
    value: ${{steps.set-value.outputs.value}}
  yaml:
    description: the whole updated YAML document
    value: ${{steps.set-value.outputs.yaml}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        jsonpath-ng
        detect-indent

  - id: set-value
    name: set ${{inputs.path}} .${{inputs.yaml-path}}
    shell: python
    env:
      inputs_path: ${{inputs.path}}
      inputs_yaml_file: ${{inputs.yaml-file}}
      inputs_yaml_text: ${{inputs.yaml-text}}
      inputs_yaml_path: ${{inputs.yaml-path}}
      inputs_yaml_value: ${{inputs.yaml-value}}
    run: |
      ## actions/yaml/set-value/action.yml#set-value
      import os, sys, yaml, json, pprint
      import jsonpath_ng.ext as jsonpath
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      inputs_path = os.getenv("inputs_path", ".")
      inputs_yaml_file = os.getenv("inputs_yaml_file")
      inputs_yaml_text = os.getenv("inputs_yaml_text")
      inputs_yaml_path = os.getenv("inputs_yaml_path")
      inputs_yaml_value = os.getenv("inputs_yaml_value")

      yaml_path = jsonpath.parse(str(inputs_yaml_path))
      print(yaml_path)

      write_file = False
      yaml_text = None
      if inputs_yaml_file is not None:
          yaml_file = Path(inputs_path).joinpath(inputs_yaml_file)
          write_file = True
          assert yaml_file.exists()
          if not yaml_file.exists():
              print(f"{yaml_file} does not exist")
              exit(1)

          yaml_text = yaml_file.read_text()

      if inputs_yaml_text is not None:
          yaml_text = str(inputs_yaml_text)

      yaml_data = yaml.safe_load(yaml_text)
      assert yaml_data is not None
      if yaml_data is None:
          print(f"{yaml_text} could not be parsed")
          exit(2)


      assert inputs_yaml_value is not None
      if inputs_yaml_value is None:
          print("no input value")
          exit(3)

      yaml_value = yaml.safe_load(inputs_yaml_value)
      assert yaml_value is not None
      if yaml_value is None:
          print(f"{inputs_yaml_value} could not be parsed")
          exit(4)
      print(yaml_value)

      print("retrieving data:")
      pprint.pp([m.value for m in yaml_path.find(yaml_data)])

      print("updating data:")
      yaml_path.update(yaml_data, yaml_value)

      print("retrieving updated data:")
      output = [m.value for m in yaml_path.find(yaml_data)]
      pprint.pp(output)

      value = None
      if len(output) > 1 or type(output) is dict:
          value = json.dumps(json.dumps(output, sort_keys=True))
      elif type(output[0]) is dict:
          value = json.dumps(json.dumps(output[0], sort_keys=True))
      else:
          value = json.dumps(output[0])

      yaml_update = json.dumps(json.dumps(yaml_data, sort_keys=True))
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"value={value}")
          print(f"value={value}", file=fh)
          print(f"yaml={yaml_update}")
          print(f"yaml={yaml_update}", file=fh)
