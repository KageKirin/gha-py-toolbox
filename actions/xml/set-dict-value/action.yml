name: XML set value
description: >-
  Retrieves the value for a given XMLpath.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  xml-file:
    description: relative path to XML file to parse
    required: false
  xml-text:
    description: alternative XML text to parse
    required: false
  xml-path:
    description: XML path expression to set value for.
    required: true
  xml-value:
    description: XML value to update. Can be object, but must be escaped as string.
    required: true

outputs:
  value:
    description: the retrieved and updated value
    value: ${{steps.set-value.outputs.value}}
  xml:
    description: the whole updated XML document
    value: ${{steps.set-value.outputs.xml}}
  json:
    description: the whole updated XML document as JSON
    value: ${{steps.set-value.outputs.json}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        jsonpath-ng
        detect-indent
        xmltodict
        dicttoxml

  - id: set-value
    name: set ${{inputs.path}} .${{inputs.xml-path}}
    shell: python
    env:
      inputs_path: ${{inputs.path}}
      inputs_xml_file: ${{inputs.xml-file}}
      inputs_xml_text: ${{inputs.xml-text}}
      inputs_xml_path: ${{inputs.xml-path}}
      inputs_xml_value: ${{inputs.xml-value}}
    run: |
      ## actions/xml/set-dict-value/action.yml#set-value
      import os, sys, json, pprint
      import xmltodict, dicttoxml
      from lxml import etree
      from pathlib import Path

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      inputs_path = os.getenv("inputs_path", ".")
      inputs_xml_file = os.getenv("inputs_xml_file")
      inputs_xml_text = os.getenv("inputs_xml_text")
      inputs_xml_path = os.getenv("inputs_xml_path")
      inputs_xml_value = os.getenv("inputs_xml_value")

      xml_path = str(inputs_xml_path)
      print(xml_path)

      write_file = False
      xml_text = None
      if inputs_xml_file is not None:
          xml_file = Path(inputs_path).joinpath(inputs_xml_file)
          write_file = True
          assert xml_file.exists()
          if not xml_file.exists():
              print(f"{xml_file} does not exist")
              exit(1)

          xml_text = xml_file.read_text()

      if inputs_xml_text is not None:
          xml_text = str(inputs_xml_text)

      xml_parser = etree.XMLParser(remove_blank_text=True)
      xml_data = etree.fromstring(xml_text, xml_parser)
      assert xml_data is not None
      if xml_data is None:
          print(f"{xml_text} could not be parsed")
          exit(2)

      pprint.pp(xmltodict.parse(etree.tostring(xml_data)))

      assert inputs_xml_value is not None
      if inputs_xml_value is None:
          print("no input value")
          exit(3)

      xml_value = (
          etree.fromstring(inputs_xml_value, xml_parser)
          if inputs_xml_value.startswith("<") and inputs_xml_value.endswith(">")
          else inputs_xml_value
      )
      assert xml_value is not None
      if xml_value is None:
          print(f"{inputs_xml_value} could not be parsed")
          exit(4)


      print("retrieving data:")
      nodes = xml_data.xpath(xml_path)
      output = [xmltodict.parse(etree.tostring(m)) for m in nodes]
      pprint.pp(output)

      print("updating data:")
      for node in nodes:
          if inputs_xml_value.startswith("<") and inputs_xml_value.endswith(">"):
              etree.strip_elements(node)
              etree.strip_attributes(node)
              node.text = ""
              node.append(xml_value)
          else:
              node.text = xml_value

      print("retrieving updated data:")
      output = [xmltodict.parse(etree.tostring(m)) for m in xml_data.xpath(xml_path)]
      pprint.pp(output)

      if write_file:
          xml_file.write_text(dicttoxml.dicttoxml(output))

      value = None
      if len(output) > 1 or type(output) is dict:
          value = json.dumps(json.dumps(output, sort_keys=True))
      elif type(output[0]) is dict:
          value = json.dumps(json.dumps(output[0], sort_keys=True))
      else:
          value = json.dumps(output[0])

      xml_update = json.dumps(dicttoxml.dicttoxml(output))
      json_update = json.dumps(json.dumps(output, sort_keys=True))

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"value={value}")
          print(f"value={value}", file=fh)
          print(f"xml={xml_update}")
          print(f"xml={xml_update}", file=fh)
          print(f"json={json_update}")
          print(f"json={json_update}", file=fh)
