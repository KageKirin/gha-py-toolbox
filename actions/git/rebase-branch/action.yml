name: GIT rebase branch
description: >
  Rebase branch from given base branch
  Runs `git rebase [branch] [arguments ...]`.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  branch:
    description: >
      (Head) Branch to rebase.
      If empty (default), do not switch branches before running command.
    required: false
    default: ''
  base:
    description: >
      Base branch (or commit-ish) to rebase from.
      If empty (default), uses default branch (usually main or master).
    required: false
    default: ''
  options:
    description: additional options to pass to rebase (e.g. --Xtheirs)
    required: false
    default: ''

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        pygit2

  - id: rebase
    name: Rebase ${{inputs.options}}
    shell: python
    env:
      rebase_path: ${{inputs.path}}
      rebase_branch: ${{inputs.branch}}
      rebase_base: ${{inputs.base}}
      rebase_options: ${{inputs.options}}
    run: |
      ## actions/git/rebase-branch/action.yml#rebase
      import os, sys

      basedir = os.getcwd()
      os.chdir(str(os.getenv("rebase_path")))

      rebase_branch = str(os.getenv("rebase_branch"))
      rebase_base = str(os.getenv("rebase_base"))
      rebase_options = str(os.getenv("rebase_options")).split()

      repo = pygit2.Repository(".")
      config = repo.config

      ## checkout correct branch
      if rebase_branch and not (
          rebase_branch == repo.head.shorthand or rebase_branch == repo.head.name
      ):
          branch = repo.lookup_branch(rebase_branch)
          ref = repo.lookup_reference(branch.name)
          repo.checkout(ref)

      cmd = ["git", "rebase"]

      if rebase_options and len(rebase_options):
          cmd += rebase_options

      ## rebase_base can be empty => use git default branch
      if rebase_base and len(rebase_base):
          cmd += [rebase_base]
      else:
          sym_ref = repo.lookup_reference("refs/remotes/origin/HEAD")
          if sym_ref and sym_ref.shortname:
              cmd += [sym_ref.shortname]
          else:
              if "init.defaultBranch" in config:
                  cmd += [config["init.defaultBranch"]]
              elif "init.defaultBranch" in config.get_global_config():
                  cmd += [config.get_global_config()["init.defaultBranch"]]
              elif "init.defaultBranch" in config.get_system_config():
                  cmd += [config.get_system_config()["init.defaultBranch"]]


      command = " ".join(cmd)
      print(command)
      err = os.waitstatus_to_exitcode(os.system(command))
      assert err == 0

      os.chdir(basedir)
      exit(err)
