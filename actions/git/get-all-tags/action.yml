name: GIT get all tags
description: >
  Returns all tags, sorted by date (ASC)

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}

outputs:
  tags:
    description: The retrieved tags
    value: ${{steps.get-tags.outputs.tags}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        pygit2

  - id: get-tags
    name: Get all tags
    shell: python
    env:
      inputs_path: ${{inputs.path}}
      tag_version_format: ${{inputs.tag-version-format}}
    run: |
      ## actions/git/get-all-tags/action.yml#get-tags
      import os, sys, shlex, re, pprint, itertools
      import pygit2
      from pathlib import Path
      from contextlib import chdir
      from datetime import datetime
      from typing import List

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      RX_REFS_TAGS = re.compile("^refs/tags/")


      # extend pygit2.Repository
      ## .get_reference_commit_time()
      def repo_get_reference_commit_time(
          self: pygit2.Repository, tag_reference: pygit2.Reference
      ) -> int:
          ref_obj = self[tag_reference.resolve().target]
          if ref_obj.type == pygit2.enums.ObjectType.TAG:
              ref_obj = ref_obj.get_object()
          return ref_obj.commit_time


      pygit2.Repository.get_reference_commit_time = repo_get_reference_commit_time


      ## .get_tag_references()
      def repo_get_tag_references(
          self: pygit2.Repository, sort: bool = False, reverse: bool = False
      ) -> List[pygit2.Reference]:
          resolved_refs = [r.resolve() for r in self.references.objects]
          resolved_tags = [r for r in resolved_refs if RX_REFS_TAGS.match(r.name)]
          if sort:
              resolved_tags = sorted(
                  resolved_tags,
                  key=lambda r: self.get_reference_commit_time(r),
                  reverse=reverse,
              )
          return resolved_tags


      pygit2.Repository.get_tag_references = repo_get_tag_references
      ##


      with chdir(str(os.getenv("inputs_path"))):
          repo = pygit2.Repository(".")

          tags = repo.get_tag_references(sort=True, reverse=False)
          pprint.pp([(t.name, t.shorthand) for t in tags])

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f'tags={" ".join([t.shorthand for t in tags])}')
              print(f'tags={" ".join([t.shorthand for t in tags])}', file=fh)

          exit(int(len(tags) == 0))
