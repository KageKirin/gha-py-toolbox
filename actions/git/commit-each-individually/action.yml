name: GIT commit
description: >
  Perform a git commits.
  Runs `git add {file}` for each resolved file, followed by a single `git commit -m
  {message}`.

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{ github.workspace }}
  files:
    description: >
      File(s) to stage (add) and commits.
      Can be glob pattern(s).
    required: true
  message:
    description: >
      Git commit message or Handlebars compatible template.
      Available variables are:
      * filename
      * filestem (filename w/o suffix)
      * filepath
    required: true

runs:
  using: composite
  steps:
  - name: Install dependencies
    shell: python -m pip install -r {0}
    run: >-
      pybars3
  - name: Commit files individually
    shell: python
    env:
      commit_path: ${{ inputs.path }}
      commit_files: ${{ inputs.files }}
      commit_message: ${{ inputs.message }}
    run: |
      import os, sys, itertools
      import pybars

      basedir = os.getcwd()
      os.chdir(str(os.getenv("commit_path")))

      commit_files = str(os.getenv("commit_files"))
      commit_message = str(os.getenv("commit_message"))
      commit_template = pybars.Compiler().compile(commit_message)

      files = commit_files.split()
      files = [
          p for p in map(lambda f: [g.as_posix() for g in Path(".").rglob(f)], files)
      ]

      err = 0
      for file in files:
          file = Path(file)
          message = commit_template(
              {"filename": file.name, "filestem": file.stem, "filepath": file.parent}
          )
          err = os.system(f'git add "{file}"')
          assert err == 0
          err = os.system(f'git commit -m "{message}"')
          assert err == 0

      os.chdir(basedir)
      exit(err)
