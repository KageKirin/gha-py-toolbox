name: GIT get highest semver tag
description: >
  Returns the highest _semver_ tag

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  tag-version-format:
    description: Python regex to identify a tag as version and retrieve said version from said tag
    required: false
    default: (\d+\.\d+\.\d+)
  zero-version:
    description: Initial version to use when no tag present.
    required: false
    default: 0.0.0


outputs:
  version:
    description: The version as retrieved from parsing the tag
    value: ${{steps.get-highest.outputs.version}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        pygit2
        semver

  - id: get-highest
    name: Get highest semver tag
    shell: python
    env:
      inputs_path: ${{inputs.path}}
      tag_version_format: ${{inputs.tag-version-format}}
      zero_version: ${{inputs.zero-version}}
    run: |
      ## actions/git/get-highest-semver-tag/action.yml#get-highest
      import os, sys, re, semver, pprint, itertools
      import pygit2
      from pathlib import Path
      from contextlib import chdir
      from datetime import datetime
      from typing import List

      os.chdir(os.getenv("GITHUB_WOKRDIR", "."))

      RX_REFS_TAGS = re.compile("^refs/tags/")
      tag_version_format = str(os.getenv("tag_version_format"))
      assert tag_version_format is not None
      print("tag_version_format:", tag_version_format)
      RX_TAG_VERSION = re.compile(tag_version_format)
      assert RX_TAG_VERSION is not None
      print("RX_TAG_VERSION", RX_TAG_VERSION)


      print("define: pygit2.Repository.get_tag_references()")


      # extend pygit2.Repository
      ## .get_tag_references()
      def repo_get_tag_references(self: pygit2.Repository) -> List[semver.Version]:
          resolved_refs = [r.resolve() for r in self.references.objects]
          resolved_tags = [r for r in resolved_refs if RX_REFS_TAGS.match(r.name)]
          shorthand_tags = [r.shorthand for r in resolved_tags]
          shorthand_vers = [RX_TAG_VERSION.search(r).group(0) for r in shorthand_tags]
          parsed_tags = sorted(
              [semver.Version.parse(r) for r in shorthand_vers], reverse=True
          )
          return parsed_tags


      pygit2.Repository.get_tag_references = repo_get_tag_references
      ##

      inputs_path = Path(os.getenv("inputs_path", "."))
      with chdir(inputs_path):

          repo = pygit2.Repository(".")
          assert repo is not None

          tags = repo.get_tag_references()

          version = str(os.getenv("zero_version"))
          if len(tags) > 0:
              version = tags[0]
              print(f"version: {version}")

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"version={version}")
              print(f"version={version}", file=fh)

          exit(int(len(tags) == 0))
