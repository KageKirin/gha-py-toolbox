name: GIT get commits
description: >
  Get commits for the current git branch,
  i.e. commits ahead of a reference branch (remote or local).

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{github.workspace}}
  branch:
    description: name of branch to check
    required: true
  reference:
    description: name of reference branch to check against
    required: false
    default: ${{ github.ref_name }}

outputs:
  commits:
    description: Whitespace-separated list of commits (short Oids)
    value: ${{ steps.get-commits.outputs.commits }}
  count:
    description: Number of commits
    value: ${{ steps.get-commits.outputs.count }}
  has-commits:
    description: True if there are indeed commits
    value: ${{ fromJSON(steps.get-commits.outputs.count) > 0 }}
  details:
    description: JSON-list of commit details
    value: ${{ fromJSON(steps.get-commits.outputs.details) }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        pygit2

  - id: get-commits
    name: Commit patches
    shell: python
    env:
      inputs_path: ${{ inputs.path }}
      inputs_branch: ${{ inputs.branch }}
      inputs_reference: ${{ inputs.reference }}
    run: |
      ## actions/git/get-commits/action.yml#get-commits
      import os, pprint, json
      from pathlib import Path
      import pygit2
      from contextlib import chdir

      path = str(os.getenv("inputs_path", "."))
      assert path is not None

      inputs_branch = str(os.getenv("inputs_branch")).replace("refs/heads/", "")
      assert inputs_branch is not None

      inputs_reference = str(os.getenv("inputs_reference")).replace("refs/heads/", "")
      assert inputs_reference is not None

      with chdir(str(os.getenv(path, "."))):
          repo = pygit2.Repository(".")
          index = repo.index

          branch = repo.branches.get(inputs_branch)
          assert branch is not None

          reference = repo.branches.get(inputs_reference)
          assert reference is not None

          print("branch:", branch.name, branch.target)
          print("reference:", reference.name, reference.target)

          commits = []
          walker = repo.walk(branch.target)
          walker.simplify_first_parent()
          for commit in walker:
              if commit.id == reference.target:
                  break
              commits.append(commit)
              print(commit)
              print(
                  commit.short_id,
                  commit.id,
                  commit.message,
                  commit.author,
                  commit.commit_time,
                  commit.commit_time_offset,
                  commit.committer,
                  commit.gpg_signature,
                  commit.message,
                  commit.message_encoding,
                  commit.message_trailers,
                  commit.parent_ids,
                  commit.parents,
                  commit.raw_message,
                  commit.tree,
                  commit.tree_id,
              )

          commits_list = " ".join([c.short_id for c in commits])

          commits_data = [
              {
                  "oid": str(c.id),
                  "short": str(c.short_id),
                  "message": c.message,
                  "title": c.message.split()[0],
                  "body": "\n".join(c.message.split()[1:]),
                  "author": str(c.author),
                  "commit_time": c.commit_time,
                  "commit_time_offset": c.commit_time_offset,
                  "committer": str(c.committer),
                  "message_encoding": c.message_encoding,
                  "message_trailers": c.message_trailers,
                  "parent_ids": [str(i) for i in c.parent_ids],
                  "tree_id": str(c.tree_id),
              }
              for c in commits
          ]
          pprint.pp(commits_data)
          commits_json_encoded = json.dumps(json.dumps(commits_data))

          with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
              print(f"commits={commits_list}")
              print(f"commits={commits_list}", file=fh)
              print(f"count={len(commits)}")
              print(f"count={len(commits)}", file=fh)
              print(f"details={commits_json_encoded}")
              print(f"details={commits_json_encoded}", file=fh)


  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      ## actions/git/get-commits/action.yml#verify-outputs
      ## actions/git/has-changes/action.yml#verify-outputs
      steps.get-commits.outputs.commits
      ${{steps.get-commits.outputs.commits}}

      steps.get-commits.outputs.count
      ${{steps.get-commits.outputs.count}}
      ${{fromJSON(steps.get-commits.outputs.count)}}
      ${{fromJSON(steps.get-commits.outputs.count) > 0}}

      steps.get-commits.outputs.details
      ${{steps.get-commits.outputs.details}}
      ${{fromJSON(steps.get-commits.outputs.details)}}
