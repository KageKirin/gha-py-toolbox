name: UPM Publish Package
description: >
  Publish a given UPM package (tgz) on the provided registry.

inputs:
  registry:
    description: >
      Registry URL from where to fetch the package, i.e. same format as package.json
      Defaults to official NPM registry.

      Note:
        GitHub: https://npm.pkg.github.com/@{owner}
        NPMJS: https://registry.npmjs.org
    required: true
    default: https://npm.pkg.github.com/@${{github.repository_owner}}
  token:
    description: >
      Authentication Bearer token for registry.

      GitHub (Enterprise): token with "packages:write" permissions for the given repository.
      npmjs.org: token generated via https://www.npmjs.com/settings/{user}/tokens
    required: true
  packagefile:
    description: >
      The package file (.tgz) created e.g. by running `npm pack` in a package folder
      or `dotnet nugettier pack`.
      File ending doesn't matter, only file path and contents do.
    required: true
  access:
    description: >
      The access-level (private or public) the published package shall have. Defaults
      to public.
    required: true
    type: choice
    options:
    - private
    - public
    default: public
  version:
    description: >
      UPM package version override.
      Empty string defaults to version indicated by package.json.
    required: false
    default: ''
  unity:
    description: >
      Minimum Unity version override required by package.json.
      Empty string defaults to version indicated by package.json.
    required: false
    default: ''
  repository:
    description: >
      UPM package repository URL override, assigned to `{.repository.url`}
      Empty string defaults to repository indicated by package.json.
    required: false
    default: ''
  directory:
    description: >
      UPM package directory path override, assigned to `{.repository.directory`}
      Empty string defaults to directory indicated by package.json.
    required: false
    default: ''

outputs:
  response:
    description: Registry response
    value: ${{fromJSON(steps.publish.outputs.response)}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: patch-tar
    name: Monkey-patch package file
    shell: python
    env:
      inputs_registry: ${{inputs.registry}}
      inputs_packagefile: ${{inputs.packagefile}}
      inputs_version: ${{inputs.version}}
      inputs_unity: ${{inputs.unity}}
      inputs_repository: ${{inputs.repository}}
      inputs_directory: ${{inputs.directory}}
    run: |
      import os, sys, json, pprint, tarfile, tempfile
      from pathlib import Path

      # get package file
      package_file = Path(os.getenv("inputs_packagefile"))
      print(f"package_file: {package_file}")
      assert package_file is not None
      assert package_file.is_file()
      package_file = package_file.rename(package_file.with_suffix(".orig.tgz"))

      registry = str(os.getenv("inputs_registry"))
      version = str(os.getenv("inputs_version", ""))
      unity = str(os.getenv("inputs_unity", ""))
      repository = str(os.getenv("inputs_repository", ""))
      directory = str(os.getenv("inputs_directory", ""))

      # create output file
      patched_file = Path(os.getenv("inputs_packagefile"))


      with tarfile.open(
          name=package_file.name, fileobj=package_file.open("rb"), mode="r:gz"
      ) as input_archive:
          with tarfile.open(name=patched_file.name, mode="w:gz") as output_archive:

              for name in input_archive.getnames():
                  info = input_archive.getmember(name)
                  contents = input_archive.extractfile(name)

                  # monkey-patch package.json overrides
                  if name == "package/package.json":
                      package_json_str = str(contents.read(), "utf-8")
                      package_json = json.loads(package_json_str)

                      if registry:
                          package_json["publishConfig"]["registry"] = registry

                      if version:
                          package_json["version"] = version

                      if unity:
                          package_json["unity"] = unity

                      if repository:
                          package_json["repository"]["url"] = repository

                      if directory:
                          package_json["repository"]["url"] = directory

                      package_json_str = json.dumps(package_json, indent=2)
                      package_json_enc = package_json_str.encode("utf-8")
                      print(f"patched package.json\n```json{package_json_str}\n```")

                      with tempfile.TemporaryFile() as patched:
                          patched.write(package_json_enc)
                          patched.flush()
                          info.size = patched.tell()

                          patched.seek(0)
                          output_archive.addfile(info, patched)
                          print(f"patched {name}, size: {info.size}")
                  else:
                      print(f"copied {name}, size: {info.size}")
                      output_archive.addfile(info, contents)


      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"packagefile={patched_file}")
          print(f"packagefile={patched_file}", file=fh)


  - id: publish
    name: Publish package
    shell: python
    env:
      inputs_registry: ${{inputs.registry}}
      inputs_token: ${{inputs.token}}
      inputs_packagefile: ${{steps.patch-tar.outputs.packagefile}}
      inputs_packagefilename: ${{inputs.packagefile}}
      inputs_access: ${{inputs.access}}
    run: |
      import os, sys, json, pprint, requests, tarfile, base64, hashlib
      from urllib.parse import urlparse, urljoin
      from pathlib import Path


      def delete_none_or_empty_values(obj):
          if isinstance(obj, dict):
              for k, v in list(obj.items()):
                  if v is None:
                      del obj[k]
                  elif isinstance(v, str) and len(v) == 0:
                      del obj[k]
                  elif isinstance(v, dict):
                      delete_none_or_empty_values(v)
                  elif isinstance(v, (list, tuple)):
                      for _ in v:
                          delete_none_or_empty_values(_)
          elif isinstance(obj, (list, tuple)):
              for _ in obj:
                  delete_none_or_empty_values(_)
          return obj


      session = requests.Session()
      session.headers["Content-Type"] = "application/json"

      # get registry
      registry_url = str(os.getenv("inputs_registry"))
      assert urlparse(registry_url) is not None
      if not registry_url.endswith("/"):
          registry_url = registry_url + "/"
      print(f"registry_url: {registry_url}")
      assert urlparse(registry_url) is not None

      # get token
      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))
      print(f"token: {token}")
      if token and token != "":
          session.headers["Authorization"] = f"Bearer {token}"

      # get package file
      package_file = Path(os.getenv("inputs_packagefile"))
      print(f"package_file: {package_file}")
      assert package_file is not None
      assert package_file.is_file()

      # get access-level
      access = str(os.getenv("inputs_access", "public"))
      if not access or len(access) == 0:
          access = "public"
      assert access is not None
      print(f"access: {access}")

      payload = None

      with tarfile.open(
          name=package_file.name, fileobj=package_file.open("rb"), mode="r:gz"
      ) as tar:

          ## get package.json and README from package file
          package_json_str = str(
              tar.extractfile("package/package.json").read(), "utf-8"
          )
          package_json = json.loads(package_json_str)
          package_name = package_json["name"]
          print("package.json", package_json_str)

          readme = str(tar.extractfile("package/README.md").read(), "utf-8")
          pprint.pp(package_json)
          print("README", readme)

          # generate the metadata used for publishing

          ## create attachments part from the package file itself

          """
          "_attachments": {
              "@myscope/my-pkg-1.3.7.tgz": {
                  "content_type": "application/octet-stream",
                  "data": "H4sIAAAAAAAAE+1TQUvD...",
                  "length": 354
              }
          }
          """

          b64data = base64.b64encode(package_file.read_bytes()).decode("ascii")
          attachments = {
              f"{package_file.name}": {
                  "content_type": "application/octet-stream",
                  "data": b64data,
                  "length": package_file.stat().st_size,
              }
          }

          ## derive the version part from package.json

          """
          "1.3.7": {
              "_id": "@myscope/my-pkg@1.3.7",
              "_nodeVersion": "12.18.4",
              "_npmVersion": "6.14.6",
              "author": {
                  "name": "GitLab Package Registry Utility"
              },
              "description": "Package created by me",
              "dist": {
                  "integrity": "sha512-loy16p...==",
                  "shasum": "4a9dbd94ca6093feda03d909f3d7e6bd89d9d4bf",
                  "tarball": "https://registry.com/@myscope/my-pkg/-/@myscope/my-pkg-1.3.7.tgz"
              },
              "keywords": [],
              "license": "ISC",
              "main": "index.js",
              "name": "@myscope/my-pkg",
              "publishConfig": {
                  "@myscope:registry": "https://registry.com"
              },
              "readme": "ERROR: No README data found!",
              "scripts": {
                  "test": "echo \"Error: no test specified\" && exit 1"
              },
              "version": "1.3.7"
          }
          """

          version = package_json
          version["_id"] = f'{package_json["name"]}@{package_json["version"]}'
          version["_nodeVersion"] = "22.1.0"
          version["_npmVersion"] = "10.7.0"
          version["readme"] = readme
          version["readmeFilename"] = "README.md"

          ### hack: add license with non-null string to avoid removal
          if not "license" in version or version["license"] == "":
              version["license"] = "CC0"

          ### create the version.dist part (checksums) from the package file
          sha512sum = hashlib.sha512(package_file.read_bytes())
          sha1sum = hashlib.sha1(package_file.read_bytes())
          packagefile_url = urljoin(
              registry_url, f"{package_name}/-/{package_file.name}"
          )
          assert urlparse(packagefile_url) is not None

          b64sha512sum = base64.b64encode(sha512sum.digest()).decode("ascii")
          hexsha1sum = sha1sum.hexdigest()
          version["dist"] = {
              "integrity": f"sha512-{b64sha512sum}",
              "shasum": hexsha1sum,
              "tarball": packagefile_url,
          }

          ## finally assemble everyting into the payload

          payload = {
              "_attachments": attachments,
              "access": access,
              "versions": {
                  f"{package_json['version']}": version,
              },
              "_id": package_json["name"],
              "description": package_json["description"],
              "dist-tags": {"latest": package_json["version"]},
              "name": package_json["name"],
          }

      pprint.pp(payload)
      payload_json = json.dumps(
          delete_none_or_empty_values(payload.copy()), indent=2, sort_keys=True
      )
      print(payload_json)


      # PUT the new version in the registry
      package_url = urljoin(registry_url, package_name)
      assert urlparse(package_url) is not None
      print(f"putting {package_url}")

      package_response = session.put(package_url, data=payload_json)
      assert package_response is not None
      print(package_response.status_code, package_response.reason)
      if package_response.ok:
          print(f"published {package_file.name} at {package_url}")
      else:
          print(f"failed to publish {package_file.name} at {package_url}")

      print(package_response.text)
      response = (
          package_response.json()
          if package_response.text
          else {"response": package_response.status_code}
      )
      pprint.pp(response)

      response_json_escaped = (
          json.dumps(json.dumps(response, sort_keys=True)) if response else "{}"
      )

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"response={response_json_escaped}")
          print(f"response={response_json_escaped}", file=fh)

      exit(0 if package_response.ok else 1)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      steps.publish.outputs.response
      ${{steps.publish.outputs.response}}
      fromJSON ${{fromJSON(steps.publish.outputs.response)}}
