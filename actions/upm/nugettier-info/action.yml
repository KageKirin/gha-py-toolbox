name: UPM NuGettier Info
description: >
  Prints information about a given nuget package (nupkg).

inputs:
  package:
    description: NuGet package name
    required: true
  version:
    description: NuGet package version. Defaults to 'latest'.
    required: false
    default: latest
  prerelease:
    description: whether to include prerelease versions
    required: false
    default: 'true'
  verbosity:
    description: >
      log-level passed to NuGettier
      trace: all logs (most verbose)
      debug: debug logs
      info: good middleground
      warning: warning and errors only
      error: errors only
      critical: critical errors only (least verbose)
    required: false
    type: choice
    options:
    - trace
    - debug
    - information
    - warning
    - error
    - critical
    default: error


outputs:
  information:
    description: JSON string of the returned output
    value: ${{ fromJSON(steps.return-info.outputs.info) }}

runs:
  using: composite
  steps:
  - id: prepare
    name: Prepare configuration
    shell: python
    env:
      inputs_additional_sources: ${{inputs.additional-sources}}
    run: |
      import os, sys, pprint
      from urllib.parse import urlparse, urljoin
      from pathlib import Path

      additional_sources = str(os.getenv("inputs_additional_sources", "")).split()

      with open(".netconfig.user", "w") as fh:
          for source in additional_sources:
              s = source.split(";")
              url = urlparse(s[0])
              pprint.pp(url)
              registry_path = url.geturl().replace(f"{url.scheme}://", "")

              print(f'[source "{registry_path}"]')
              print(f'[source "{registry_path}"]', file=fh)
              print(f"protocol = {url.scheme}")
              print(f"protocol = {url.scheme}", file=fh)
              if len(s) > 1:
                  print(f"password = {s[1]}")
                  print(f"password = {s[1]}", file=fh)
              print("", file=fh)

  - id: print-info
    name: Info
    shell: python
    env:
      inputs_package: ${{inputs.package}}
      inputs_version: ${{inputs.version}}
      inputs_prerelease: ${{inputs.prerelease}}
      NUGETTIER_Logging__LogLevel__Default: ${{inputs.verbosity}}
    run: |
      import os, sys, pprint
      from pathlib import Path


      package = str(os.getenv("inputs_package"))
      assert package
      assert len(package) > 0

      version = str(os.getenv("inputs_version", "latest"))
      assert version

      prerelease = os.getenv("inputs_prerelease", "true") == "true"

      cmd = ["dotnet", "nugettier", "info"]

      if len(version):
          cmd += [f"{package}@{version}"]
      else:
          cmd += [package]

      if prerelease:
          cmd += ["--preRelease"]

      command = " ".join(cmd)
      print(command)
      err = os.waitstatus_to_exitcode(os.system(command))
      assert err == 0
      exit(err)

  - id: return-info
    name: Info
    shell: python
    env:
      inputs_package: ${{inputs.package}}
      inputs_version: ${{inputs.version}}
      inputs_prerelease: ${{inputs.prerelease}}
      NUGETTIER_Logging__LogLevel__Default: critical
    run: |
      import os, sys, pprint, json, subprocess
      from pathlib import Path

      package = str(os.getenv("inputs_package"))
      assert package
      assert len(package) > 0

      version = str(os.getenv("inputs_version", "latest"))
      assert version

      prerelease = os.getenv("inputs_prerelease", "true") == "true"

      cmd = ["dotnet", "nugettier", "info"]

      if len(version):
          cmd += [f"{package}@{version}"]
      else:
          cmd += [package]

      if prerelease:
          cmd += ["--preRelease"]

      cmd += ["--json"]

      pprint.pp(cmd)
      j = subprocess.check_outout(cmd)

      data = json.loads(j)
      data_json_encoded = json.dumps(json.dumps(data))

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"info={data_json_encoded}")
          print(f"info={data_json_encoded}", file=fh)

      exit(err)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      steps.return-info.outputs.info
      ${{steps.return-info.outputs.info}}
      ${{ fromJSON(steps.return-info.outputs.info) }}
      ${{ fromJSON(fromJSON(steps.return-info.outputs.info)) }}
