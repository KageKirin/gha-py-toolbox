name: GH merge pullrequest
description: >
  Merges the given pull request.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:write" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}
  pullrequest:
    description: >
      The pull request NUMBERS.
      WARNING: the PR NUMBER is not the PR ID
    required: true

  title:
    description: >
      Pystache template for the commit title of the merge/squash commit resulting
      from merging this pull request.
      Defaults to the title of the pull request.

      Available fields are:
      - merge_method
      - title, body, number, etc, i.e. all the fields exposed by the REST API
        @see: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
    required: true
    default: '{{title}}'
  body:
    description: >
      Pystache template for the commit body for the merge/squash commit resulting
      from merging this pull request.
      Defaults to the body (1st message) of the pull request.

      Available fields are:
      - merge_method
      - title, body, number, etc, i.e. all the fields exposed by the REST API
        @see: https://docs.github.com/en/rest/pulls/pulls?apiVersion=2022-11-28#get-a-pull-request
    required: true
    default: '{{body}}'

  method:
    description: >
      Pull Request Merge Method

      Represents available types of methods to use when merging a pull request.
      MERGE: Add all commits from the head branch to the base branch with a merge
      commit.
      REBASE: Add all commits from the head branch onto the base branch individually.
      SQUASH: Combine all commits from the head branch into a single commit in the
      base branch.
    type: choice
    options:
    - MERGE
    - REBASE
    - SQUASH
    required: true


outputs:
  status:
    description: >
      Merge status as returned by the merge.

      ```json
      {
        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
        "merged": true,
        "message": "Pull Request successfully merged"
      }```
    value: ${{fromJSON(steps.merge-pullrequest.outputs.status)}}


runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub
        pystache

  - id: merge-pullrequest
    name: Merge pull request
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_api_url: ${{inputs.api-url}}
      inputs_token: ${{inputs.token}}
      inputs_pullrequest: ${{inputs.pullrequest}}
      inputs_merge: ${{inputs.merge}}
      inputs_title: ${{inputs.title}}
      inputs_body: ${{inputs.body}}
    run: |
      import os, sys, re, json, pprint
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet
      import pystache

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))

      api_url = str(os.getenv("inputs_api_url"))
      repository = str(os.getenv("inputs_repository"))
      pr_num = str(os.getenv("inputs_pullrequest"))
      merge_method = str(os.getenv("inputs_method")).lower()
      title_template = pystache.parse(str(os.getenv("inputs_title")))
      print(title_template)
      body_template = pystache.parse(str(os.getenv("inputs_body")))
      print(body_template)

      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      pr = repo.get_pull(number=int(pr_num))
      assert pr is not None
      print(pr)
      data = pr.raw_data
      data["merge_method"] = merge_method
      print(data)
      merge_title = pystache.render(title_template, data)
      merge_body = pystache.render(body_template, data)


      print("======================== TITLE ========================")
      print(merge_title)
      print("======================== BODY  ========================")
      print(merge_body)
      print("=======================================================")

      status = pr.merge(
          commit_title=merge_title,
          commit_message=merge_body,
          merge_method=merge_method,
          sha=pr.sha,
          delete_branch=True,
      )
      assert status.merged

      status_json = json.dumps(json.dumps(status))
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"status={status_json}")
          print(f"status={status_json}", file=fh)
