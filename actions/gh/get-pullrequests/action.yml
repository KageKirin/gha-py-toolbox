name: GH get pull requests
description: >
  Retrieves all OPEN pull requests matching a provided filter.
  NOTE: closed pull requests are not retrieved.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}
  base-ref:
    description: >
      Base branch name used to retrieve pull requests that merge into the given base
      branch.
      Defaults to 'main', can be explicitly set to empty to retrieve all pull requests
    required: false
    default: main

  filter-title:
    description: >
      Filter regular expression applied on the pull requests title.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-author:
    description: >
      Filter regular expression applied on the pull requests author/submitter.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-assignee:
    description: >
      Filter regular expression applied on the pull requests assignee.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-branch:
    description: >
      Filter regular expression applied on the pull requests branch.
      Empty (default) means no filter.
    required: false
    default: ''


outputs:
  ids:
    description: >
      The IDs identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.ids}}
  prs:
    description: >
      The PR numbers identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.prs}}
  branches:
    description: >
      The branches identifying the pull requests as space-separated list.
    value: ${{steps.get-pullrequests.outputs.branches}}
  pullrequests:
    description: >
      JSON representation of the pull requests
    value: ${{ fromJSON(steps.get-pullrequests.outputs.pullrequests) }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub

  - id: get-pullrequests
    name: Build
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_api_url: ${{inputs.api-url}}
      inputs_token: ${{inputs.token}}
      inputs_base_ref: ${{inputs.base-ref}}
      inputs_filter_title: ${{inputs.filter-title}}
      inputs_filter_author: ${{inputs.filter-author}}
      inputs_filter_assignee: ${{inputs.filter-assignee}}
      inputs_filter_branch: ${{inputs.filter-branch}}
    run: |
      import os, sys, re, json, pprint, itertools
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet

      token = str(os.getenv("inputs_token"))
      if not token:
          token = str(os.getenv("GITHUB_TOKEN"))

      api_url = str(os.getenv("inputs_api_url"))
      repository = str(os.getenv("inputs_repository"))
      base_ref = str(os.getenv("inputs_base_ref"))


      filter_title = str(os.getenv("inputs_filter_title"))
      filter_author = str(os.getenv("inputs_filter_author"))
      filter_assignee = str(os.getenv("inputs_filter_assignee"))
      filter_branch = str(os.getenv("inputs_filter_branch"))


      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      pulls = repo.get_pulls(
          state="open",
          sort="created",
          base=base_ref if base_ref and len(base_ref) > 0 else NotSet,
          head=NotSet,
      )

      pprint.pp([(pr.id, pr.number, pr.title) for pr in pulls])

      filtered_pulls = [pr for pr in pulls]
      if filter_title and len(filter_title) > 0:
          rx = re.compile(filter_title)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr.title), filtered_pulls)
          )

      if filter_author and len(filter_author) > 0:
          rx = re.compile(filter_author)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr.user.login), filtered_pulls)
          )

      if filter_assignee and len(filter_assignee) > 0:
          rx = re.compile(filter_assignee)
          filtered_pulls = list(
              filter(
                  lambda pr: (pr.assignee and rx.search(pr.assignee.login))
                  or (
                      pr.assignees
                      and any(filter(lambda ass: rx.search(ass), pr.assignees))
                  ),
                  filtered_pulls,
              )
          )

      if filter_branch and len(filter_branch) > 0:
          rx = re.compile(filter_branch)
          filtered_pulls = list(
              filter(lambda pr: rx.search(pr.head.ref), filtered_pulls)
          )

      pprint.pp([(pr.id, pr.number, pr.title) for pr in filtered_pulls])

      ids = [str(pr.id) for pr in filtered_pulls]
      prs = [str(pr.number) for pr in filtered_pulls]
      branches = [pr.head.ref for pr in filtered_pulls]

      pullrequests_json = json.dumps([r.raw_data for r in filtered_pulls])
      pullrequests_json_escaped = json.dumps(pullrequests_json)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"ids={' '.join(ids)}")
          print(f"ids={' '.join(ids)}", file=fh)
          print(f"prs={' '.join(prs)}")
          print(f"prs={' '.join(prs)}", file=fh)
          print(f"branches={' '.join(branches)}")
          print(f"branches={' '.join(branches)}", file=fh)
          print(f"pullrequests={pullrequests_json_escaped}")
          print(f"pullrequests={pullrequests_json_escaped}", file=fh)
