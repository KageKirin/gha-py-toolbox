name: GH get branches
description: >
  Retrieves a given list of (remote) branches.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}

  branches:
    description: >
      The branches (aka head ref names) to query.
      Whitespace-separated list.
    required: false

outputs:
  shas:
    description: >
      The branches head Oids.
    value: ${{ steps.get-branches.outputs.shas }}
  branches:
    description: >
      A JSON dict of all the queried branches data.
    value: ${{ fromJson(steps.get-branches.outputs.branches) }}



runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub

  - id: get-branches
    name: Get branches
    shell: python
    env:
      inputs_repository: ${{ inputs.repository }}
      inputs_api_url: ${{ inputs.api-url }}
      inputs_token: ${{ inputs.token }}
      inputs_branches: ${{ inputs.branches }}
    run: |
      import os, sys, re, json, pprint
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet
      import pystache

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))

      api_url = str(os.getenv("inputs_api_url"))
      repository = str(os.getenv("inputs_repository"))

      branch_names = set(str(os.getenv("inputs_branches")).split())
      assert branch_names is not None

      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      branch_data = dict()
      branch_shas = []

      for branch_name in branch_names:
          branch = repo.get_branch(branch=branch_name)
          assert branch is not None
          branch_shas.append(branch.commit.sha)
          branch_data[branch_name] = branch.raw_data

      pprint.pp(branch_data)
      if branch_data is None:
          raise RuntimeError("unable to retrieve any branch")

      branches_json = json.dumps(json.dumps(branch_data.raw_data))


      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"shas={' '.join(branch_shas)}")
          print(f"shas={' '.join(branch_shas)}", file=fh)
          print(f"branches={branches_json}")
          print(f"branches={branches_json}", file=fh)
