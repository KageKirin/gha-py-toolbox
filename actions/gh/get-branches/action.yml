name: GH get branches
description: >
  Retrieves a given list of (remote) branches.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}

  filter-branch:
    description: >
      Filter regular expressions applied on the branch (ref) name.
      Whitespace-separated list.
      Empty (default) means no filter.
    required: false
    default: ''
  filter-oid:
    description: >
      Hashes used to filter applied on the branch Oid (sha).
      Whitespace-separated list.
      Empty (default) means no filter.
    required: false
    default: ''

outputs:
  shas:
    description: >
      The branches head Oids.
    value: ${{ steps.get-branches.outputs.shas }}
  branches:
    description: >
      A JSON dict of all the queried branches data.
    value: ${{ fromJSON(steps.get-branches.outputs.branches) }}



runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub

  - id: get-branches
    name: Get branches
    shell: python
    env:
      inputs_repository: ${{ inputs.repository }}
      inputs_api_url: ${{ inputs.api-url }}
      inputs_token: ${{ inputs.token }}
      inputs_filter_branch: ${{ inputs.filter-branch }}
      inputs_filter_oid: ${{ inputs.filter-oid }}
    run: |
      import os, sys, re, json, pprint
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))

      api_url = str(os.getenv("inputs_api_url"))
      repository = str(os.getenv("inputs_repository"))

      filter_branches = set(str(os.getenv("inputs_filter_branch", "")).split())
      assert filter_branches is not None

      filter_oids = set(str(os.getenv("inputs_filter_oid", "")).split())
      assert filter_oids is not None

      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      branches = repo.get_branches()
      filtered_branches = [br for br in branches]
      pprint.pp(filtered_branches)

      if filter_branches:
          subfiltered_branches = []
          for filter_branch in [f for f in filter_branches if len(f) > 0]:
              print(filter_branch)
              rx = re.compile(filter_branch)
              print(rx)
              subfiltered_branches.extend(
                  [br for br in filtered_branches if rx.search(br.name)]
              )
          filtered_branches = set(subfiltered_branches)

      if filter_oids:
          subfiltered_branches = []
          for filter_oid in [f for f in filter_oids if len(f) > 0]:
              rx = re.compile(f"^{filter_oid}")
              filtered_branches.extend(
                  [br for br in filtered_branches if rx.match(br.commit.sha)]
              )
              filtered_branches = set(subfiltered_branches)

      branch_data = dict()
      filtered_branches = set(filtered_branches)
      for branch in filtered_branches:
          branch_data[branch.name] = branch.raw_data

      pprint.pp(branch_data)
      if len(branch_data) == 0:
          raise RuntimeError("unable to retrieve any branch")

      branches_json = json.dumps(json.dumps(branch_data))
      branch_shas = [branch_data[k]["commit"]["sha"] for k in branch_data.keys()]

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"shas={' '.join(branch_shas)}")
          print(f"shas={' '.join(branch_shas)}", file=fh)
          print(f"branches={branches_json}")
          print(f"branches={branches_json}", file=fh)

  - id: verify-outputs
    name: Verify
    shell: cat {0}
    run: |
      steps.get-branches.outputs.shas
      ${{steps.get-branches.outputs.shas}}

      steps.get-branches.outputs.branches
      ${{fromJSON(steps.get-branches.outputs.branches)}}
