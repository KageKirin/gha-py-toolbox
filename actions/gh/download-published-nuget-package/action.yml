name: GH download published NUGET registry_package
description: >
  Downloads a published NUGET registry package.
  This can only be called from a `on-registry_package[published]` job as below,
  as it requires the data structure specific to `github.event.registry_package`.
  Further, permissions must be set as below:

  ```
  on:
    registry_package:
      types: [published]

  jobs:
    upload:
      permissions:
        packages: read  #<-- access packages
    runs-on: xxx-latest
    steps:
    - id: download-package
      name: Download published package
      uses: kagekirin/gha-py-toolbox/actions/gh/download-published-nuget-package@main
      with:
        registry_package_json: $ {{ toJSON(github.event.registry_package) }}
        token: $ {{ github.token }}
  ```

inputs:
  token:
    description: >
      GitHub (Enterprise): token with "packages:read" permissions for the given repository.
    required: false
    default: ${{ github.token }}
  registry_package_json:
    description: >
      The github.event.registry_package structure as JSON:

      ```
      registry_package_json: $ {{ toJSON(github.event.registry_package) }}
      ```
    required: true

outputs:
  packages:
    description: >
      Filename of the downloaded package(s).
    value: ${{ steps.download-packages.outputs.packages }}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: print-json
    name: Print JSON data
    shell: python
    run: |
      """
      ${{ inputs.registry_package_json }}
      """

  - id: download-packages
    name: Download
    shell: python
    env:
      inputs_registry_package_json: ${{ inputs.registry_package_json }}
      GITHUB_TOKEN: ${{ inputs.token }}
    run: |
      import os, sys, json, pprint, requests, shutil
      from urllib.parse import urlparse
      from pathlib import Path

      token = str(os.getenv("GITHUB_TOKEN"))
      assert token

      registry_package = json.loads(os.getenv("inputs_registry_package_json"))
      assert registry_package
      pprint.pp(registry_package)

      ecosystem = registry_package["ecosystem"]
      assert ecosystem.lower() == "nuget"

      package_type = registry_package["package_type"]
      assert package_type.lower() == "nuget"

      package_name = registry_package["name"]
      assert package_name

      package_version = registry_package["package_version"]["version"]
      assert package_version
      assert package_version == registry_package["package_version"]["name"]

      registry_url = urlparse(registry_package["registry"]["url"])

      registry_type = registry_package["registry"]["type"]
      assert registry_type.lower() == "nuget"

      print(registry_url.geturl())
      if not registry_url.scheme:
          registry_url = urlparse(f"https://{registry_url.geturl()}")

      headers = {"Authorization": f"Bearer {token}"}
      registry_index_url = urlparse(f"{registry_url.geturl()}/index.json")
      print(registry_index_url.geturl())
      r_index = requests.get(registry_index_url.geturl(), headers=headers).json()
      pprint.pp(r_index)

      registry_package_url = urlparse(
          f"{registry_url.geturl()}/{package_name}/index.json"
      )
      print(registry_package_url.geturl())
      r_package = requests.get(registry_package_url.geturl(), headers=headers).json()
      pprint.pp(r_package)

      registry_package_version_url = urlparse(
          f"{registry_url.geturl()}/{package_name}/{package_version}.json"
      )
      print(registry_package_version_url.geturl())
      r_pv = requests.get(
          registry_package_version_url.geturl(), headers=headers
      ).json()
      pprint.pp(r_pv)

      package_url = urlparse(r_pv["packageContent"])
      print(package_url)

      nupkg_path = Path(Path(package_url.path).name)
      print(nupkg_path)
      r_nupkg = requests.get(package_url.geturl(), headers=headers, stream=True)

      with nupkg_path.open("wb") as f:
          shutil.copyfileobj(r_nupkg.raw, f)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"packages={nupkg_path}")
          print(f"packages={nupkg_path}", file=fh)
