name: GH download published registry_package
description: >
  Downloads published registry package files.
  This can only be called from a `on-registry_package[published]` job as below,
  as it requires the data structure specific to `github.event.registry_package`.
  Further, permissions must be set as below:

  ```
  on:
    registry_package:
      types: [published]

  jobs:
    upload:
      permissions:
        packages: read  #<-- access packages
    runs-on: xxx-latest
    steps:
    - id: download-package
      name: Download published package
      uses: kagekirin/gha-py-toolbox/actions/gh/download-published-npm-package@main
      with:
        registry_package_json: $ {{ toJSON(github.event.registry_package) }}
        token: $ {{ github.token }}
  ```

inputs:
  token:
    description: >
      GitHub (Enterprise): token with "packages:read" permissions for the given repository.
    required: false
    default: ${{github.token}}
  registry_package_json:
    description: >
      The github.event.registry_package structure as JSON:

      ```
      registry_package_json: $ {{ toJSON(github.event.registry_package) }}
      ```
    required: true

outputs:
  packages:
    description: >
      Whitespace-separated list of the downloaded package files.
    value: ${{steps.download-packages.outputs.packages}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        requests

  - id: print-json
    name: Print JSON data
    shell: python
    run: |
      """
      ${{inputs.registry_package_json}}
      """

  - id: download-packages
    name: Download
    shell: python
    env:
      inputs_registry_package_json: ${{inputs.registry_package_json}}
      inputs_token: ${{inputs.token}}
    run: |
      import os, sys, json, pprint, requests, shutil
      from urllib.parse import urlparse
      from pathlib import Path

      token = str(os.getenv("inputs_token"))
      if not token:
          token = str(os.getenv("GITHUB_TOKEN"))
      assert token

      session = requests.Session()
      if token and token != "":
          session.headers["Authorization"] = f"Bearer {token}"

      registry_package = json.loads(os.getenv("inputs_registry_package_json"))
      assert registry_package
      pprint.pp(registry_package)

      ecosystem = registry_package["ecosystem"]
      package_type = registry_package["package_type"]
      package_name = registry_package["name"]
      assert package_name

      package_version = registry_package["package_version"]["version"]
      assert package_version
      assert package_version == registry_package["package_version"]["name"]

      package_files = package_version["package_files"]
      assert package_files

      files = list()

      for package_file in package_files:
          name = package_file["name"]
          download_url = package_file["download_url"]
          assert urlparse(download_url)
          with session.get(download_url, stream=True) as r:
              if r.ok:
                  with Path(name).open("wb") as f:
                      shutil.copyfileobj(r.raw, f)
                  files.add(name)

      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"packages={' '.join(files)}")
          print(f"packages={' '.join(files)}", file=fh)
