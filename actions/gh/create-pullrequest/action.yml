name: GH create pull request
description: >
  Creates a pull request on the given repository.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format where to create the pull request.
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with "contents:write" permissions for the given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-pullrequest workflows.
    required: false
    default: ${{github.token}}

  title:
    description: >
      The name of the pull request.
    required: true
  body:
    description: >
      Text describing the contents of the pull request.
      Pystache template, getting fed 'commits' (single preformatted string) and 'commit-messages' as [{'commit': '<sha>', 'message': 'bump whatever'}] from each contained commit
    required: false
    default: '{{commits}}'

  base:
    description: base branch name
    required: true
    default: main
  head:
    description: head branch name
    required: true

  labels:
    description: >
      Labels (names) to add to pullrequest.
      Labels must exist, i.e. be created before adding them to a PR or issue.
      Whitespace-separated list.
    required: false
    default: ''



  dry-run:
    description: add --dry-run argument to perform dry-run
    required: false
    default: 'false'

outputs:
  id:
    description: ID of the created pullrequest
    value: ${{steps.create-pullrequest.outputs.id}}

runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub
        pygit2

  - id: create-pullrequest
    name: Create pull request
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_api_url: ${{inputs.api-url}}
      inputs_title: ${{inputs.title}}
      inputs_body: ${{inputs.body}}
      inputs_base: ${{inputs.base}}
      inputs_head: ${{inputs.head}}
      inputs_dryrun: ${{inputs.dry-run}}
    run: |
      ## actions/gh/create-pullrequest/action.yml#create-pullrequest
      import os, sys, json, pprint, itertools
      import pygit2
      from pathlib import Path
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet
      import pystache
      import html


      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))

      api_url = str(os.getenv("inputs_api_url"))
      assert api_url is not None

      repository = str(os.getenv("inputs_repository"))
      assert repository is not None

      pr_title = str(os.getenv("inputs_title"))
      assert pr_title is not None

      pr_body_template = str(os.getenv("inputs_body"))
      assert pr_body_template is not None

      pr_labels = str(os.getenv("inputs_labels")).split()
      assert pr_labels is not None

      pr_base = str(os.getenv("inputs_base"))
      assert pr_base is not None

      pr_head = str(os.getenv("inputs_head"))
      assert pr_head is not None

      pr_dryrun = str(os.getenv("inputs_dryrun")) == "true"
      assert pr_dryrun is not None

      # pr_commits =
      data = {
          "commits": pr_commits,
          # "commit-messages":
      }
      pr_body = html.unescape(pystache.render(pr_body_template, data))


      print("======================== TITLE ========================")
      print(pr_title)
      print("======================== BODY  ========================")
      print(pr_body)
      print("=======================================================")


      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      pr_id = -1
      pullrequest_json = {}
      if not pr_dryrun:
          pr = create_pull(
              base=pr_base,
              head=pr_head,
              title=pr_title,
              body=pr_body,
          )
          pprint.pp(pr)
          pr_id = pullrequest.id
          pullrequest_json.raw_data
          if pr_labels and len(pr_labels):
              pr.set_labels(pr_labels)

      pullrequest_json_encoded = json.dumps(json.dumps(pullrequest_json))
      with open(os.environ["GITHUB_OUTPUT"], "a") as fh:
          print(f"id={pr_id}")
          print(f"id={pr_id}", file=fh)
          print(f"pullrequest={pullrequest_json_encoded}")
          print(f"pullrequest={pullrequest_json_encoded}", file=fh)
