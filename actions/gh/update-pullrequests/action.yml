name: GH update pull requests with merge commit
description: >
  Updates provided pull requests up to provided count.
  WARNING: this will create a merge commit on the branch, usage not recommended.

inputs:
  repository:
    description: >
      Repository in `owner/repo` format for which to get the pull requests
    required: false
    default: ${{github.repository}}
  api-url:
    description: >
      GitHub (Enterprise) instance API URL (including protocol).
    required: false
    default: ${{github.api_url}}
  token:
    description: >
      GitHub (Enterprise): token with at least "contents:read" permissions for the
      given repository.
      You might prefer passing a different token via secret.MY_TOKEN to allow chain
      reaction-like
      triggering of on-release workflows.
    required: false
    default: ${{github.token}}
  pullrequests:
    description: >
      Whitespace-separated list of pull request NUMBERS
      WARNING: the PR NUMBER is not the PR ID
    required: true


runs:
  using: composite
  steps:
  - name: Install dependencies
    uses: kagekirin/gha-py-toolbox/actions/pip/install@main
    with:
      packages: >-
        PyGithub

  - id: get-pullrequests
    name: Update pull requests
    shell: python
    env:
      inputs_repository: ${{inputs.repository}}
      inputs_api_url: ${{inputs.api-url}}
      inputs_token: ${{inputs.token}}
      inputs_pullrequests: ${{inputs.pullrequests}}
    run: |
      ## actions/gh/update-pullrequests/action.yml#get-pullrequests
      import os, sys, re, json, pprint
      from github import Github
      from github import Auth
      from github.GithubObject import NotSet

      token = str(os.getenv("inputs_token", os.getenv("GITHUB_TOKEN", "")))

      api_url = str(os.getenv("inputs_api_url"))
      repository = str(os.getenv("inputs_repository"))
      pullrequests = str(os.getenv("inputs_pullrequests")).split()

      auth = Auth.Token(token)
      gh = Github(base_url=api_url, auth=auth)
      repo = gh.get_repo(repository)

      for pr_num in pullrequests:
          pr = repo.get_pull(number=int(pr_num))
          success = pr.update_branch()
