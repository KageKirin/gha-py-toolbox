name: .NET Build, Pack & Publish
description: >-
  Macro to build, pack and publish NuGet packages
  (aka dotnet-bipapu).

inputs:
  path:
    description: path from where to run the actions
    required: false
    default: ${{ github.workspace }}
  configurations:
    description: >
      configuration(s) to build for (Debug, Release, ...).
      empty string (default) defers to project/solution defaults.
      whitespace separated list.
    required: false
    default: ''
  frameworks:
    description: >
      framework(s) to build for (net8.0, netstandard2.1, ...).
      empty string (default) defers to project/solution defaults.
      whitespace separated list.
    required: false
    default: ''
  projects:
    description: >
      project(s) to build
      empty string (default) defers to project defaults
      whitespace separated list. can use glob pattern.
      empty string (default) defers to solution.
    required: false
    default: ''
  registry:
    description: >-
      NuGet registry to publish on.
      Defaults to **GitHub NuGet**.
    required: false
    default: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
  token:
    description: >-
      Authorization token for the above registry.
      GitHub (Enterprise): requires 'packages:write' permissions.
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
  - id: build
    name: Build projects
    uses: kagekirin/gha-py-toolbox/actions/dotnet/build@main
    with:
      path: ${{ inputs.path }}
      projects: ${{ inputs.projects }}
      frameworks: ${{ inputs.frameworks }}
      configurations: ${{ inputs.configurations }}
  - id: pack
    name: Pack nupkgs
    uses: kagekirin/gha-py-toolbox/actions/dotnet/pack@main
    with:
      path: ${{ inputs.path }}
      projects: ${{ inputs.projects }}
      frameworks: ${{ inputs.frameworks }}
      configurations: ${{ inputs.configurations }}
  - id: publish
    name: Publish nupkgs
    uses: kagekirin/gha-py-toolbox/actions/dotnet/publish@main
    with:
      path: ${{ inputs.path }}
      packages: ${{ steps.pack.outputs.packages }}
      registry: ${{ inputs.registry }}
      token: ${{ inputs.token }}
